<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Eze.NetEx</name>
    </assembly>
    <members>
        <member name="T:Eze.NetEx.CallContextPropertyManager">
            <summary>
            Do not use this class directly.  Import ICallContextPropertyManager.  The only reason this class is public is for legacy modules that do not use MEF properly.
            </summary>
        </member>
        <member name="T:Eze.NetEx.ICallContextPropertyManager">
            <summary>
            Store and retrieve settings from the .NET CallContext.  
            </summary>
        </member>
        <member name="M:Eze.NetEx.ICallContextPropertyManager.Push(System.String,System.String)">
            <summary>
            Store a single string value in the CallContext identified by its name
            </summary>
            <param name="name">The identity of the value to be stored</param>
            <param name="value">The value to be stored</param>
            <returns>An object which can be disposed to revert to the previous value for the given name</returns>
        </member>
        <member name="M:Eze.NetEx.ICallContextPropertyManager.Push(System.String,System.Int32)">
            <summary>
            Store a single integer value in the CallContext identified by its name
            </summary>
            <param name="name">The identity of the value to be stored</param>
            <param name="value">The value to be stored</param>
            <returns>An object which can be disposed to revert to the previous value for the given name</returns>
        </member>
        <member name="M:Eze.NetEx.ICallContextPropertyManager.PushAll(Eze.NetEx.Context.PropertyList)">
            <summary>
            Store a group of primitive properties in the CallContext (each with a name and value)
            </summary>
            <param name="nameValuePairs">A set of name-value pair context properties</param>
            <returns>An object which can be disposed to revert to the all of the given properties to their previous values</returns>
        </member>
        <member name="M:Eze.NetEx.ICallContextPropertyManager.Get(System.String)">
            <summary>
            Retrieve a single value from the CallContext identified by its name, or null if the name does not exist in the context
            </summary>
            <param name="name">The identity of the value stored in the context</param>
            <returns>The value of the property or null if it does not exist</returns>
        </member>
        <member name="T:Eze.NetEx.PropertyChangeNotificationBase">
            <summary>
            This base class provides a complete implementation for raising events that conform to the INotifyPropertyChanges interface
            </summary>
        </member>
        <member name="M:Eze.NetEx.PropertyChangeNotificationBase.SetProperty``1(System.String,``0@,``0,System.Action)">
            <summary>
            Sets the specified property to the new value.  Using this method to set the property will
            raise all the related events and attach/detach child property events if the property implements
            IViewModel.  
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="property">Reference to the underlying member to change.</param>
            <param name="newValue">The value to set the property to.</param>
            <param name="callbackIfChanged">Optional callback action, called if property value has changed</param>
            <returns>True if the property was changed.  False otherwise.</returns>
        </member>
        <member name="M:Eze.NetEx.PropertyChangeNotificationBase.BeforePropertyChange``1(System.String,``0@,``0)">
            <summary>
            This method is called just before a property changes.  The change can be cancelled if this method returns false.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="property">Reference to the underlying member that is changing.</param>
            <param name="newValue">The value to set the property to.</param>
            <returns>True if the change is allowed.  False otherwise.</returns>
        </member>
        <member name="M:Eze.NetEx.PropertyChangeNotificationBase.AfterPropertyChange``1(System.String,``0@,``0)">
            <summary>
            This method is called just after a property changes.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="property">Reference to the underlying member that is changing.</param>
            <param name="newValue">The value to set the property to.</param>
        </member>
        <member name="M:Eze.NetEx.PropertyChangeNotificationBase.Validate">
            <summary>
            Runs validations synchronously. Any async validations will be run on a background thread and caller thread will be blocked till it returns
            Synchronous validations will be run on caller thread as expected.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eze.NetEx.PropertyChangeNotificationBase.ValidateAsync">
            <summary>
            Runs validations asynchronously. Both sync and async validations will be run asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Eze.NetEx.PropertyChangeNotificationBase.PropertyChanged">
            <summary>
            This event is fired when a property on this object changes.  
            </summary>
        </member>
        <member name="E:Eze.NetEx.PropertyChangeNotificationBase.PropertyChanging">
            <summary>
            This event is fired when a property on this object is about to change.
            </summary>
        </member>
        <member name="T:Eze.NetEx.ICompositeProperty">
            <summary>
            Interface for a class that supports change notification for when its properties and its child properties are about to change or 
            have just been changed.
            </summary>
        </member>
        <member name="T:Eze.NetEx.Context.PropertyList">
            <summary>
            A simple collection wrapper for name-value pair initialization lists when adding several immutable properties to 
            the call-context.  
            This is not intended as a general-purpose collection.  The duplicate key check it performs on each add is not efficient
            and would hurt perfomance if used for storing large sets of data.
            </summary>
            <example>
            var kvl = new PropertyList{{"AKey", "AValue"}, {"AKey2", 125}}
            </example>
        </member>
        <member name="M:Eze.NetEx.Context.PropertyList.Add(System.String,System.String)">
            <summary>
            Add name/value pair to the list.
            </summary>
            <param name="name">The property name</param>
            <param name="value">The property value</param>
        </member>
        <member name="M:Eze.NetEx.Context.PropertyList.Add(System.String,System.Int32)">
            <summary>
            Add name/value pair to the list.
            </summary>
            <param name="name">The property name</param>
            <param name="value">The property value</param>
        </member>
        <member name="M:Eze.NetEx.Context.PropertyList.Contains(System.String,System.String)">
            <summary>
            Check if the given name and value pair exist in the property list
            </summary>
            <param name="name">The property name</param>
            <param name="value">The property value</param>
            <returns>true if the property contains the name with the given value; false otherwise</returns>
        </member>
        <member name="M:Eze.NetEx.Context.PropertyList.Contains(System.String,System.Int32)">
            <summary>
            Check if the given name and value pair exist in the property list
            </summary>
            <param name="name">The property name</param>
            <param name="value">The property value</param>
            <returns>true if the property contains the name with the given value; false otherwise</returns>
        </member>
        <member name="P:Eze.NetEx.Context.PropertyList.Count">
            <summary>
            Gets the number of elements contained in the property list.
            </summary>
        </member>
        <member name="T:Eze.NetEx.AssemblyCatalogEx">
            <summary>
            This assembly catalog provides a workaround for MEF to successfully import 
            open generic types when using the RegistrationBuilder.
            </summary>
        </member>
        <member name="T:Eze.NetEx.CustomAssemblyCatalog">
            <summary>
            Catalog Wrapper that wraps non-shared disposable exports in a non-disposable part definition so
            that MEF does not store the object in the container.
            </summary>
        </member>
        <member name="M:Eze.NetEx.CustomAssemblyCatalog.#ctor(System.Reflection.Assembly,System.Reflection.Context.CustomReflectionContext)">
            <summary>
            Constructs the wrapper for a given catalog
            </summary>
            <param name="assembly"></param>
            <param name="context"></param>
        </member>
        <member name="T:Eze.NetEx.CustomComposablePartDefinition">
            <summary>
            ComposablePartDefinition Wrapper that is Non-Disposable
            </summary>
        </member>
        <member name="M:Eze.NetEx.CustomComposablePartDefinition.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
            <summary>
            Construct a wrapper around the passed in ComposablePartDefinition
            </summary>
            <param name="innerPartDefinition">Definition to wrap, cannot be null</param>
        </member>
        <member name="M:Eze.NetEx.IIoCBoostrapper.RegisterType``2">
            <summary>
            Imperatively adds service to the dependency catalog
            </summary>
            <typeparam name="TFrom">The service interface</typeparam>
            <typeparam name="TTo">The service implementation</typeparam>
        </member>
        <member name="M:Eze.NetEx.IIoCBoostrapper.RegisterOverride``2">
            <summary>
            Replace service implementation in the depedency catalog
            </summary>
            <typeparam name="TFrom">The service interface</typeparam>
            <typeparam name="TTo">The new service implementation</typeparam>
        </member>
        <member name="M:Eze.NetEx.IIoCBoostrapper.RegisterInstance``1(``0)">
            <summary>
            Imperatively adds singleton service instance to the dependency catalog
            </summary>
            <typeparam name="T">The service interface</typeparam>
            <param name="instance">The service implementation</param>
        </member>
        <member name="M:Eze.NetEx.IIoCBoostrapper.RegisterInstance``1(System.String,``0)">
            <summary>
            Imperatively adds singleton service instance to the dependency catalog
            </summary>
            <typeparam name="T">The service interface</typeparam>
            <param name="contractName">An alternate contract name for the service</param>
            <param name="instance">The service implementation</param>
        </member>
        <member name="M:Eze.NetEx.IIoCBoostrapper.GetInstance``1">
            <summary>
            Returns an instance of given service type that has been registered in the dependency catalog
            </summary>
            <typeparam name="T">The service interface</typeparam>
            <returns>The service interface or null if the service is not registered</returns>
        </member>
        <member name="M:Eze.NetEx.IIoCBoostrapper.GetInstance(System.Type)">
            <summary>
            Returns an instance of given service type that has been registered in the dependency catalog
            </summary>
            <param name="serviceType">The service interface</param>
            <returns>The service interface or null if the service is not registered</returns>
        </member>
        <member name="M:Eze.NetEx.IIoCBoostrapper.GetAllInstances``1">
            <summary>
            Returns all instances of the given service type that has been registered in the dependency catalog
            </summary>
            <typeparam name="TService">The service interface</typeparam>
            <returns>All instances of the service that have been registered</returns>
        </member>
        <member name="M:Eze.NetEx.IIoCBoostrapper.GetAllInstances(System.Type)">
            <summary>
            Returns all instances of the given service type that has been registered in the dependency catalog
            </summary>
            <param name="serviceType">The service interface</param>
            <returns>All instances of the service that have been registered</returns>
        </member>
        <member name="M:Eze.NetEx.IIoCBoostrapper.Compose(System.Object)">
            <summary>
            Import all required dependencies for the given object
            </summary>
            <param name="o">The object to compose</param>
        </member>
        <member name="M:Eze.NetEx.IIoCBoostrapper.EnsureRegistrationBuilder">
            <summary>
            Returns the registration builder for the catalog.  Creates it if it does not exist.
            </summary>
            <returns>The imperative registration builder for the dependency catalog</returns>
        </member>
        <member name="T:Eze.NetEx.IoC">
            <summary>
            This class serves as our facade over the common service locator.
            </summary>
        </member>
        <member name="M:Eze.NetEx.IoC.Initialize">
            <summary>
            Initialize the dependency injection catalog with the all assemblies currently loaded in the AppDomain.
            </summary>
        </member>
        <member name="M:Eze.NetEx.IoC.Compose(System.Object)">
            <summary>
            Import all required dependencies for the given object
            </summary>
            <param name="instance">The object to compose</param>
        </member>
        <member name="M:Eze.NetEx.IoC.Initialize(System.Reflection.Assembly[])">
            <summary>
            Initialize the dependency injection catalog with the given set of assemblies.
            </summary>
            <param name="assemblies">The assemblies to be loaded</param>
            <exception cref="T:System.ArgumentNullException">If assemblies is null</exception>
        </member>
        <member name="M:Eze.NetEx.IoC.Initialize(System.String[])">
            <summary>
            Initialize the dependency injection catalog with the given set of assemblies.
            </summary>
            <param name="assemblyNames">The names of assemblies to be loaded that must exist in the local directory</param>
            <exception cref="T:System.ArgumentNullException">If assemblyNames is null</exception>
            <exception cref="T:System.IO.FileNotFoundException">If any of the assemblyNames do not exist in the local directory</exception>
        </member>
        <member name="M:Eze.NetEx.IoC.Initialize(System.String[],System.String[])">
            <summary>
            Initialize the dependency injection catalog with the given set of assemblies.
            </summary>
            <param name="requiredAssemblyNames">The names of assemblies to be loaded that must exist in the local directory</param>
            <param name="optionalAssemblyNames">The names of assemblies to be loaded that may exist in the local directory</param>
            <exception cref="T:System.ArgumentNullException">If requiredAssemblyNames or optionalAssemblyNames are null</exception>
            <exception cref="T:System.IO.FileNotFoundException">If any of the requiredAssemblyNames do not exist in the local directory</exception>
        </member>
        <member name="M:Eze.NetEx.IoC.Initialize(System.String)">
            <summary>
            Initialize the dependency injection catalog with the given set of assemblies.
            </summary>
            <param name="assemblyName">The assembly name to be loaded that must exist in the local directory</param>
            <exception cref="T:System.ArgumentNullException">If assemblyName is null</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the assemblyName does not exist in the local directory</exception>
        </member>
        <member name="M:Eze.NetEx.IoC.Initialize(System.Reflection.Assembly)">
            <summary>
            Initialize the dependency injection catalog with the given set of assemblies.
            </summary>
            <param name="assembly">The assembly to be loaded</param>
            <exception cref="T:System.ArgumentNullException">If assembly is null</exception>
        </member>
        <member name="M:Eze.NetEx.IoC.Uninitialize">
            <summary>
            Clear all information from the dependency catalog
            </summary>
        </member>
        <member name="M:Eze.NetEx.IoC.GetInstance``1">
            <summary>
            Returns an instance of given service type that has been registered in the dependency catalog
            </summary>
            <typeparam name="TService">The service interface</typeparam>
            <returns>The service interface</returns>
            <exception cref="T:System.ComponentModel.Composition.CompositionException">The service is not registered</exception>
        </member>
        <member name="M:Eze.NetEx.IoC.GetInstance(System.Type)">
            <summary>
            Returns an instance of given service type that has been registered in the dependency catalog
            </summary>
            <param name="serviceType">The service interface</param>
            <returns>The service interface or null if the service is not registered</returns>
        </member>
        <member name="M:Eze.NetEx.IoC.GetAllInstances``1">
            <summary>
            Returns all instances of the given service type that has been registered in the dependency catalog
            </summary>
            <typeparam name="TService">The service interface</typeparam>
            <returns>All instances of the service that have been registered</returns>
            <exception cref="T:System.ComponentModel.Composition.CompositionException">The service is not registered</exception>
        </member>
        <member name="M:Eze.NetEx.IoC.GetAllInstances(System.Type)">
            <summary>
            Returns all instances of the given service type that has been registered in the dependency catalog
            </summary>
            <param name="serviceType">The service interface</param>
            <returns>All instances of the service that have been registered</returns>\
        </member>
        <member name="M:Eze.NetEx.IoC.RegisterType``1">
            <summary>
            Imperatively adds service to the dependency catalog
            </summary>
            <typeparam name="T">The service interface and implementation</typeparam>
        </member>
        <member name="M:Eze.NetEx.IoC.RegisterType``2">
            <summary>
            Imperatively adds service to the dependency catalog
            </summary>
            <typeparam name="TFrom">The service interface</typeparam>
            <typeparam name="TTo">The service implementation</typeparam>
        </member>
        <member name="M:Eze.NetEx.IoC.RegisterOverride``2">
            <summary>
            Replace service implementation in the depedency catalog
            </summary>
            <typeparam name="TFrom">The service interface</typeparam>
            <typeparam name="TTo">The new service implementation</typeparam>
        </member>
        <member name="M:Eze.NetEx.IoC.RegisterInstance``1(``0)">
            <summary>
            Imperatively adds singleton service instance to the dependency catalog
            </summary>
            <typeparam name="T">The service interface</typeparam>
            <param name="instance">The service implementation</param>
        </member>
        <member name="M:Eze.NetEx.IoC.RegisterInstance``1(System.String,``0)">
            <summary>
            Imperatively adds singleton service instance to the dependency catalog
            </summary>
            <typeparam name="T">The service interface</typeparam>
            <param name="contractName">An alternate contract name for the service</param>
            <param name="instance">The service implementation</param>
        </member>
        <member name="P:Eze.NetEx.IoC.IsInitialized">
            <summary>
            Checks if Initialize() has completed successfully
            </summary>
        </member>
        <member name="T:Eze.NetEx.HybridBootstrapper">
            <summary>
            This Hybrid bootstrapper combines several different IoC libraries/concepts:
            1) MEF- used for composition, automatic Import/Export discovery, GetAllInstances()
            2) Castle- interception
            </summary>
        </member>
        <member name="T:Eze.NetEx.NotDisposableComposablePart">
            <summary>
            ComposablePart Wrapper that does not implement IDisposable
            </summary>
        </member>
        <member name="M:Eze.NetEx.NotDisposableComposablePart.#ctor(System.ComponentModel.Composition.Primitives.ComposablePart)">
            <summary>
            Constructs a wrapper around the passed in ComposablePart
            </summary>
            <param name="composablePart">ComposablePart to wrap, cannot be null</param>
        </member>
        <member name="T:Eze.NetEx.Logging.CallContextPatternConverter">
            <summary>
            CallContextPatternConverter, a custom PatternLayoutConverter for log4net to render property list originated from call context. 
            </summary>
            <remarks>This class is used in log4net configuration section in app.config to enable custom formatting for a property, using key/value list retrieved from a pre-defined call context slot
            <example>
            This is a fragment from app.config, which shows how to add custom pattern layout converter
            <code>
            &lt;layout type="log4net.Layout.PatternLayout"&gt;
            	&lt;converter&gt;
            		&lt;name value="context" /&gt;
            	&lt;type value="Eze.NetEx.Logging.CallContextPatternConverter" /&gt;
            	&lt;/converter&gt;
            	&lt;conversionPattern type="log4net.Util.PatternString" value="%%context"/&gt;
            &lt;/layout&gt;
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Eze.NetEx.Logging.CallContextPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Eze.NetEx.Logging.DefaultLogMessage">
            <summary>
            A default log message that accepts an object
            </summary>
        </member>
        <member name="M:Eze.NetEx.Logging.DefaultLogMessage.#ctor(System.Object)">
            <summary>
            Initializes an instance of <see cref="T:Eze.NetEx.Logging.DefaultLogMessage"/>
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="T:Eze.NetEx.Logging.LoggerTypeCache">
            <summary>
            Cache of string representation of <see cref="T:System.Type"/> instances used for logging
            </summary>
        </member>
        <member name="F:Eze.NetEx.Logging.LoggerTypeCache.TypeMap">
            <summary>
            A map of Type.GUID and the corresponding type's string representation
            </summary>
        </member>
        <member name="M:Eze.NetEx.Logging.LoggerTypeCache.GetLoggerName(System.Type)">
            <summary>
            Generates a logger name based on a type
            </summary>
            <param name="type">Type of logger</param>
            <returns><see cref="T:System.String"/> representation of the <see cref="T:System.Type"/> </returns>
        </member>
        <member name="T:Eze.NetEx.Logging.ILog">
            <summary>
            Log instance 
            </summary>
        </member>
        <member name="M:Eze.NetEx.Logging.ILog.Debug(Eze.NetEx.Logging.ILogMessage,System.String,System.Int32,System.String)">
            <summary>
            Log debug messsages
            </summary>
            <param name="message">Message</param>
            <param name="caller">Caller. Do not set manually. Compiler will set for you</param>
            <param name="line">Line. Do not set manually. Compiler will set for you</param>
            <param name="filePath">FilePath. Do not set manually. Compiler will set for you</param>
        </member>
        <member name="M:Eze.NetEx.Logging.ILog.Debug(Eze.NetEx.Logging.ILogMessage,System.Exception,System.String,System.Int32,System.String)">
            <summary>
            Log debug messsages
            </summary>
            <param name="message">Message</param>
            <param name="exception">Exception</param>
            <param name="caller">Caller. Do not set manually. Compiler will set for you</param>
            <param name="line">Line. Do not set manually. Compiler will set for you</param>
            <param name="filePath">FilePath. Do not set manually. Compiler will set for you</param>
        </member>
        <member name="M:Eze.NetEx.Logging.ILog.Info(Eze.NetEx.Logging.ILogMessage,System.String,System.Int32,System.String)">
            <summary>
            Log info messsage
            </summary>
            <param name="message">Message</param>
            <param name="caller">Caller. Do not set manually. Compiler will set for you</param>
            <param name="line">Line. Do not set manually. Compiler will set for you</param>
            <param name="filePath">FilePath. Do not set manually. Compiler will set for you</param>
        </member>
        <member name="M:Eze.NetEx.Logging.ILog.Info(Eze.NetEx.Logging.ILogMessage,System.Exception,System.String,System.Int32,System.String)">
            <summary>
            Log info messsage
            </summary>
            <param name="message">Message</param>
            <param name="exception">Exception</param>
            <param name="caller">Caller. Do not set manually. Compiler will set for you</param>
            <param name="line">Line. Do not set manually. Compiler will set for you</param>
            <param name="filePath">FilePath. Do not set manually. Compiler will set for you</param>
        </member>
        <member name="M:Eze.NetEx.Logging.ILog.Warn(Eze.NetEx.Logging.ILogMessage,System.String,System.Int32,System.String)">
            <summary>
            Log warn messsage
            </summary>
            <param name="message">Message</param>
            <param name="caller">Caller. Do not set manually. Compiler will set for you</param>
            <param name="line">Line. Do not set manually. Compiler will set for you</param>
            <param name="filePath">FilePath. Do not set manually. Compiler will set for you</param>
        </member>
        <member name="M:Eze.NetEx.Logging.ILog.Warn(Eze.NetEx.Logging.ILogMessage,System.Exception,System.String,System.Int32,System.String)">
            <summary>
            Log warn messsage
            </summary>
            <param name="message">Message</param>
            <param name="exception">Exception</param>
            <param name="caller">Caller. Do not set manually. Compiler will set for you</param>
            <param name="line">Line. Do not set manually. Compiler will set for you</param>
            <param name="filePath">FilePath. Do not set manually. Compiler will set for you</param>
        </member>
        <member name="M:Eze.NetEx.Logging.ILog.Error(Eze.NetEx.Logging.ILogMessage,System.String,System.Int32,System.String)">
            <summary>
            Log error messsage
            </summary>
            <param name="message">Message</param>
            <param name="caller">Caller. Do not set manually. Compiler will set for you</param>
            <param name="line">Line. Do not set manually. Compiler will set for you</param>
            <param name="filePath">FilePath. Do not set manually. Compiler will set for you</param>
        </member>
        <member name="M:Eze.NetEx.Logging.ILog.Error(System.Exception,System.String,System.Int32,System.String)">
            <summary>
            Log error messsage
            </summary>
            <param name="message">Message</param>
            <param name="exception">Exception</param>
            <param name="caller">Caller. Do not set manually. Compiler will set for you</param>
            <param name="line">Line. Do not set manually. Compiler will set for you</param>
            <param name="filePath">FilePath. Do not set manually. Compiler will set for you</param>
        </member>
        <member name="M:Eze.NetEx.Logging.ILog.Error(Eze.NetEx.Logging.ILogMessage,System.Exception,System.String,System.Int32,System.String)">
            <summary>
            Log error messsage
            </summary>
            <param name="message">Message</param>
            <param name="exception">Exception</param>
            <param name="caller">Caller. Do not set manually. Compiler will set for you</param>
            <param name="line">Line. Do not set manually. Compiler will set for you</param>
            <param name="filePath">FilePath. Do not set manually. Compiler will set for you</param>
        </member>
        <member name="M:Eze.NetEx.Logging.ILog.Fatal(Eze.NetEx.Logging.ILogMessage,System.String,System.Int32,System.String)">
            <summary>
            Log fatal messsage
            </summary>
            <param name="message">Message</param>
            <param name="caller">Caller. Do not set manually. Compiler will set for you</param>
            <param name="line">Line. Do not set manually. Compiler will set for you</param>
            <param name="filePath">FilePath. Do not set manually. Compiler will set for you</param>
        </member>
        <member name="M:Eze.NetEx.Logging.ILog.Fatal(System.Exception,System.String,System.Int32,System.String)">
            <summary>
            Log fatal messsage
            </summary>
            <param name="exception">Exception</param>
            <param name="caller">Caller. Do not set manually. Compiler will set for you</param>
            <param name="line">Line. Do not set manually. Compiler will set for you</param>
            <param name="filePath">FilePath. Do not set manually. Compiler will set for you</param>
        </member>
        <member name="M:Eze.NetEx.Logging.ILog.Fatal(Eze.NetEx.Logging.ILogMessage,System.Exception,System.String,System.Int32,System.String)">
            <summary>
            Log fatal messsage
            </summary>
            <param name="message">Message</param>
            <param name="exception">Exception</param>
            <param name="caller">Caller. Do not set manually. Compiler will set for you</param>
            <param name="line">Line. Do not set manually. Compiler will set for you</param>
            <param name="filePath">FilePath. Do not set manually. Compiler will set for you</param>
        </member>
        <member name="P:Eze.NetEx.Logging.ILog.IsDebugEnabled">
            <summary>
            Gets debug enabled
            </summary>
        </member>
        <member name="P:Eze.NetEx.Logging.ILog.IsInfoEnabled">
            <summary>
            Gets info enabled
            </summary>
        </member>
        <member name="P:Eze.NetEx.Logging.ILog.IsWarnEnabled">
            <summary>
            Gets warn enabled
            </summary>
        </member>
        <member name="P:Eze.NetEx.Logging.ILog.IsErrorEnabled">
            <summary>
            Gets error enabled
            </summary>
        </member>
        <member name="P:Eze.NetEx.Logging.ILog.IsFatalEnabled">
            <summary>
            Gets fatal enabled
            </summary>
        </member>
        <member name="T:Eze.NetEx.Logging.SensitiveValueContractResolver">
            <summary>
            Contract resolver for Json.Net prevent printing properties marked with <seealso cref="T:Eze.NetEx.Logging.SensitiveValueAttribute"/>
            </summary>
        </member>
        <member name="T:Eze.NetEx.Logging.SensitiveValueContractResolver.SensitiveValueProvider">
            <summary>
            Used to return a print-friendly value for properties market with <see cref="T:Eze.NetEx.Logging.SensitiveValueAttribute"/>
            </summary>
        </member>
        <member name="T:Eze.NetEx.Logging.SensitiveValueAttribute">
            <summary>
            <see cref="T:Eze.NetEx.Logging.SensitiveValueContractResolver"/> will obfuscate the value upon serialization
            </summary>
        </member>
        <member name="T:Eze.NetEx.Logging.SplunkJsonObjectRender">
            <summary>
            Formats Json serialization for Splunk logging using Log4Net formatting properties
            </summary>
        </member>
        <member name="T:Eze.NetEx.Logging.Log">
            <summary>
            Log API contains all log methods
            </summary>
        </member>
        <member name="F:Eze.NetEx.Logging.Log.Log4NetLogger">
            <remarks>Internal for testing only. Treat as private</remarks>
        </member>
        <member name="M:Eze.NetEx.Logging.Log4NetAdapter.AddListeners(System.Collections.Generic.IEnumerable{Eze.NetEx.Logging.ILoggerAdapter})">
            <summary>
            Adds a log listener
            </summary>
            <param name="adapters"></param>
        </member>
        <member name="M:Eze.NetEx.Logging.Log4NetAdapter.ClearListeners">
            <summary>
            Clears all listners
            </summary>
        </member>
        <member name="M:Eze.NetEx.Logging.Log4NetAdapter.GetListeners">
            <summary>
            Gets all listners
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eze.NetEx.Logging.Log4NetAdapter.ConfigureLog4Net">
            <summary>
            Configures log4net
            </summary>
            <returns>Source of configuration</returns>
        </member>
        <member name="P:Eze.NetEx.Logging.Log4NetAdapter.DefaultLog">
            <summary>
            Default log that is not type specific. Uses typeof(Log4NetAdapter)
            </summary>
        </member>
        <member name="T:Eze.NetEx.Logging.ILogger">
            <summary>
            Log factory
            </summary>
        </member>
        <member name="M:Eze.NetEx.Logging.ILogger.ClearLoggerAdapters">
            <summary>
            Clears logger adapters <see cref="T:Eze.NetEx.Logging.ILoggerAdapter"/>
            </summary>
        </member>
        <member name="M:Eze.NetEx.Logging.ILogger.GetLogger(System.Type)">
            <summary>
            Creates a type specific logger
            </summary>
            <param name="type">Type of calling class</param>
            <returns>Logger</returns>
        </member>
        <member name="M:Eze.NetEx.Logging.ILogger.LogError(System.Exception,System.String)">
            <summary>
            Obsolete: Do not use! Use ILogger.GetLogger instead. Will be removed 10/16/14
            Logs the exception message.
            Also logs Source, StackTrace and ThreadId.
            </summary>
            <param name="e"></param>
            <param name="source">Do not override this.</param>
        </member>
        <member name="M:Eze.NetEx.Logging.ILogger.LogError(System.Object,System.Exception,System.String)">
            <summary>
            Obsolete: Do not use! Use ILogger.GetLogger instead. Will be removed 10/16/14
            Logs Error with exception and a custom message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
            <param name="source"></param>
        </member>
        <member name="M:Eze.NetEx.Logging.ILogger.LogDebug(System.Object,System.String)">
            <summary>
            Obsolete: Do not use! Use ILogger.GetLogger instead. Will be removed 10/16/14
            Logs the Dubug Message.
            Also logs Source and ThreadId.</summary>
            <param name="message"></param>
            <param name="source">Do not override this</param>
        </member>
        <member name="M:Eze.NetEx.Logging.ILogger.LogInfo(System.Object,System.String)">
            <summary>
            Obsolete: Do not use! Use ILogger.GetLogger instead. Will be removed 10/16/14
            Logs the Info Message.
            Also logs Source and ThreadId.</summary>
            <param name="message"></param>
            <param name="source">Do not override this</param>
        </member>
        <member name="M:Eze.NetEx.Logging.ILogger.LogFatal(System.Object,System.Exception,System.String)">
            <summary>
            Obsolete: Do not user! Use ILogger.GetLogger instead. Will be removed 10/16/14
            Logs the Fatal Message.
            Also logs Source, StackTrace and ThreadId.</summary>
            <param name="message">General Message</param>
            <param name="e">Logs Exception Message and its call stack</param>
            <param name="source">Do not override this value</param>
        </member>
        <member name="M:Eze.NetEx.Logging.ILogger.LogWarn(System.Object,System.Exception,System.String)">
            <summary>
            Obsolete: Do not user! Use ILogger.GetLogger instead. Will be removed 10/16/14
            Logs the Warn Message.
            Also logs Source, StackTrace and ThreadId.</summary>
            <param name="message">General Message</param>
            <param name="e">Logs Exception Message and its call stack</param>
            <param name="source">Do not override this value</param>
        </member>
        <member name="P:Eze.NetEx.Logging.ILogger.LoggerAdapters">
            <summary>
            Gets or sets logger adapters <see cref="T:Eze.NetEx.Logging.ILoggerAdapter"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Eze.NetEx.Logging.Log4NetAsyncForwardingAppender">
            <summary>
            Provides asynchronous logging capabilities to the log4net architecture
            </summary>
        </member>
        <member name="T:Eze.NetEx.Logging.Logger">
            <summary>
            Logger manager used for setting up listeners and creating a type-specific logger
            </summary>
        </member>
        <member name="M:Eze.NetEx.Logging.Logger.#ctor">
            <summary>
            Logger constructor. This should not be used whenever possible
            </summary>
        </member>
        <member name="M:Eze.NetEx.Logging.Logger.GetLogger(System.Type)">
            <summary>
            Returns the names log instance
            </summary>
            <param name="type">Calling type</param>
            <returns>Named log instace</returns>
        </member>
        <member name="M:Eze.NetEx.Logging.Logger.LogError(System.Exception,System.String)">
            Obsolete: Do not use. Use ILogger.GetLogger instead. Will be removed 10/16/14
        </member>
        <member name="M:Eze.NetEx.Logging.Logger.LogDebug(System.Object,System.String)">
            Obsolete: Do not use. Use ILogger.GetLogger instead. Will be removed 10/16/14
        </member>
        <member name="M:Eze.NetEx.Logging.Logger.LogInfo(System.Object,System.String)">
            Obsolete: Do not use. Use ILogger.GetLogger instead. Will be removed 10/16/14
        </member>
        <member name="M:Eze.NetEx.Logging.Logger.LogFatal(System.Object,System.Exception,System.String)">
            Obsolete: Do not use. Use ILogger.GetLogger instead. Will be removed 10/16/14
        </member>
        <member name="M:Eze.NetEx.Logging.Logger.LogWarn(System.Object,System.Exception,System.String)">
            Obsolete: Do not use. Use ILogger.GetLogger instead. Will be removed 10/16/14
        </member>
        <member name="M:Eze.NetEx.Logging.Logger.LogError(System.Object,System.Exception,System.String)">
            Obsolete: Do not use. Use ILogger.GetLogger instead. Will be removed 10/16/14
        </member>
        <member name="F:Eze.NetEx.Logging.LoggerImpl._instance">
            <summary>
            Creates an instance of the <see cref="T:Eze.NetEx.Logging.LoggerImpl"/> class
            </summary>
            <param name="settings">Optional logger settings</param>
        </member>
        <member name="M:Eze.NetEx.Logging.LoggerImpl.ClearLoggerAdapters">
            <inheritdoc/>
        </member>
        <member name="M:Eze.NetEx.Logging.LoggerImpl.GetLogger(System.Type)">
            <inheritdoc/>
        </member>
        <member name="P:Eze.NetEx.Logging.LoggerImpl.LoggerAdapters">
            <inheritdoc/>
        </member>
        <member name="T:Eze.NetEx.Logging.LogMessage">
            <summary>
            Represents the published logging data
            </summary>
        </member>
        <member name="T:Eze.NetEx.Logging.SplunkStringJsonConverter">
            <summary>
            Format string properties for Splunk consumption
            </summary>
        </member>
        <member name="T:Eze.NetEx.ModelBase">
            <summary>
            Base class for models that support property change notification.
            </summary>
        </member>
        <member name="T:Eze.NetEx.ObservableCollectionEx`1">
            <summary>
            This class derives from and extends the functionality of the ObservableCollection
            </summary>
            <typeparam name="T">The generic type of the collection items.</typeparam>
        </member>
        <member name="M:Eze.NetEx.ObservableCollectionEx`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the specified range of items.
            </summary>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:Eze.NetEx.ObservableCollectionEx`1.ClearAndNotify">
            <summary>
            Clears the contents of the collection raises ItemRemoved for each item in the collection.
            </summary>
            <remarks>
            Calling Clear() does not raise ItemRemoved for the contents.
            </remarks>
        </member>
        <member name="T:Eze.NetEx.Threading.ITimerBasedPoller">
            <summary>
            Calls the delegate action on a configured Frequency.
            </summary>
        </member>
        <member name="M:Eze.NetEx.Threading.ITimerBasedPoller.Configure(System.TimeSpan,System.Action)">
            <summary>
            Configure the auto-repeating timer based poller.
            </summary>
            <param name="updateFrequency"></param>
            <param name="actionToPerform"></param>
        </member>
        <member name="M:Eze.NetEx.Threading.ITimerBasedPoller.Configure(System.TimeSpan,System.Action,System.Boolean)">
            <summary>
            Configure the timer based poller.
            </summary>
            <param name="updateFrequency"></param>
            <param name="actionToPerform"></param>
            <param name="repeatTask"></param>
        </member>
        <member name="M:Eze.NetEx.Threading.ITimerBasedPoller.Start(System.Boolean)">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:Eze.NetEx.Threading.ITimerBasedPoller.Stop">
            <summary>
            stops the timer.
            </summary>
        </member>
        <member name="T:Eze.NetEx.Threading.TimerBasedPollerBase">
            <summary>
            Time based poller
            </summary>
        </member>
        <member name="M:Eze.NetEx.Threading.TimerBasedPollerBase.#ctor(Eze.NetEx.Logging.ILogger,System.TimeSpan,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:Eze.NetEx.Threading.TimerBasedPollerBase"/> class
            </summary>
            <param name="logger">Logger object</param>
            <param name="updateFrequency">Update frequence</param>
            <param name="repeatTask">Determines if the fast is repeated without calling ChangeTimerInterval</param>
        </member>
        <member name="M:Eze.NetEx.Threading.TimerBasedPollerBase.#ctor(System.TimeSpan,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:Eze.NetEx.Threading.TimerBasedPollerBase"/> class
            </summary>
            <param name="updateFrequency">Update frequence</param>
            <param name="repeatTask">Determines if the fast is repeated without calling ChangeTimerInterval</param>
        </member>
        <member name="M:Eze.NetEx.Threading.TimerBasedPollerBase.OnTimerTick">
            <summary>
            When overriden represents the work to be done on each poll
            </summary>
        </member>
        <member name="M:Eze.NetEx.Threading.TimerBasedPollerBase.Stop">
            <summary>
            Stops the time based poller
            </summary>
        </member>
        <member name="M:Eze.NetEx.Threading.TimerBasedPollerBase.Start(System.Boolean)">
            <summary>
            Starts the time based poller
            </summary>
            <param name="startImmediately"></param>
        </member>
        <member name="M:Eze.NetEx.Threading.TimerBasedPollerBase.ChangeTimerInterval(System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            Configure the time based poller
            </summary>
            <param name="interval">Interval</param>
            <param name="startImmediately">Start immediately</param>
            <param name="repeatTask">Determines if the polling is repeated without calling ChangeTimerInterval again</param>
        </member>
        <member name="P:Eze.NetEx.Threading.TimerBasedPollerBase.Stopped">
            <summary>
            Determines if the poller is stopped
            </summary>
        </member>
        <member name="M:Eze.NetEx.Threading.TimerBasedPollerFactory.#ctor(Eze.NetEx.Logging.ILogger)">
            <summary>
            
            </summary>
            <param name="logger"></param>
        </member>
        <member name="T:Eze.NetEx.TypeUtility">
            <summary>
            This class provides utility methods for checking whether properties or types implement a specified interface.
            </summary>
        </member>
        <member name="M:Eze.NetEx.TypeUtility.PropertyImplementsInterface(System.Object,System.String,System.Type)">
            <summary>
            Checks to see if a property on an object implements a specific interface.
            </summary>
            <param name="instance">The object instance.</param>
            <param name="propName">The name of the property.</param>
            <param name="interfaceType">The interface to check availability for.</param>
            <returns>True if the property implements the specified interface.  False otherwise.</returns>
        </member>
        <member name="M:Eze.NetEx.TypeUtility.PropertyImplementsInterface(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Checks to see if a property implements a specific interface.
            </summary>
            <param name="propInfo">The property to check.</param>
            <param name="interfaceType">The interface to check availability for.</param>
            <returns>True if the property implements the specified interface.  False otherwise.</returns>
        </member>
        <member name="M:Eze.NetEx.TypeUtility.ImplementsInterface(System.Type,System.Type)">
            <summary>
            Checks to see if the specified instance type implements the specified interface.
            </summary>
            <param name="instanceType">The instance type to test.</param>
            <param name="interfaceType">The interface to check if the instance type implements.</param>
            <returns>True if the instance implements the interface.  False otherwise.</returns>
        </member>
        <member name="M:Eze.NetEx.TypeUtility.IsNumeric(System.Type)">
            <summary>
            Checks to see if the specified type is a numeric type.
            </summary>
            <param name="type">The type to test.</param>
            <returns>True if the instance is of a numeric type.  False otherwise.</returns>
        </member>
        <member name="M:Eze.NetEx.TypeUtility.GetPrettyPrintType(System.Type)">
            <summary>
            Converts <see cref="T:System.Type"/> to <see cref="T:System.String"/>
            </summary>
            <param name="type">Type</param>
            <returns><see cref="T:System.String"/> representation </returns>
        </member>
    </members>
</doc>
