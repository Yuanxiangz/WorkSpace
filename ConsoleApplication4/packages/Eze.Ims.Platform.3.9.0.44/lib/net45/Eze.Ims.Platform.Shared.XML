<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Eze.Ims.Platform.Shared</name>
    </assembly>
    <members>
        <member name="T:Eze.Ims.Platform.Shared.AsymmetricEncryptionProviderFactory">
            <summary>
            AsymmetricEncryptionProviderFactory implements IAsymmetricEncryptionProviderFactory, which can be used 
            to create instances of asymmetric encryption providers
            Each instance can be initialized with key data
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Shared.Interface.IAsymmetricEncryptionProviderFactory">
            <summary>
            IAsymmetricEncryptionProviderFactory is used to create instances of asymmetric encryption providers
            Each instance can be initialized with key data
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.Interface.IAsymmetricEncryptionProviderFactory.CreateProvider(System.String,System.String)">
            <summary>
            Used to create an instance of encryption provider
            </summary>
            <param name="providerId">An id (or algorithm) of the provider to be created</param>
            <param name="initializationData">Key data to initialize the provider with. If null is passed the provider will autogenerate keys</param>
            <returns>An instance of a provider</returns>
        </member>
        <member name="P:Eze.Ims.Platform.Shared.Interface.IAsymmetricEncryptionProviderFactory.SupportedProviderIds">
            <summary>
            This property returns a collection of supported provider id strings
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.AsymmetricEncryptionProviderFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.AsymmetricEncryptionProviderFactory.CreateProvider(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Eze.Ims.Platform.Shared.AsymmetricEncryptionProviderFactory.SupportedProviderIds">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.CallContextUtility.ClearExecutionContext``1(System.Func{``0})">
            <summary>
            Executes a function <paramref name="impl"/> under cleared ims execution context, restoring it at the end
            </summary>
            <typeparam name="TResult">Type of function's return value</typeparam>
            <param name="impl">A <see cref="T:System.Func`1"/> to execute</param>
            <returns><paramref name="impl"/> function's return value</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.CallContextUtility.ClearExecutionContext(System.Action)">
            <summary>
            Executes an action <paramref name="impl"/> under cleared ims execution context, restoring it at the end
            </summary>
            <param name="impl">An action to execute</param>
        </member>
        <member name="T:Eze.Ims.Platform.Shared.Interface.IAsymmetricEncryptionProvider">
            <summary>
            IAsymmetricEncryptionProvider can be used to sign and verify data
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.Interface.IAsymmetricEncryptionProvider.SignData(System.Byte[])">
            <summary>
            Signs message
            </summary>
            <param name="message">Input message</param>
            <returns>Message signature</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.Interface.IAsymmetricEncryptionProvider.VerifyData(System.Byte[],System.Byte[])">
            <summary>
            Verifies message integrity against signature
            </summary>
            <param name="message">Message to be verified</param>
            <param name="signature">Verification signature</param>
            <returns>True if verification is successful</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.Interface.IAsymmetricEncryptionProvider.GetKeyParams(System.Boolean)">
            <summary>
            Returns a string representing they in use. This string can be used to create instances of the provider
            </summary>
            <param name="includePrivateKey">Pass true to include private key in the return value</param>
            <returns>string, which represents the key</returns>
        </member>
        <member name="P:Eze.Ims.Platform.Shared.Interface.IAsymmetricEncryptionProvider.ProviderId">
            <summary>
            This property returns an instantiated provider id
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Shared.Interface.IAsymmetricEncryptionProvider.SupportedIds">
            <summary>
            This property return all provider ids supported by the implementation
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IBusPublishSubscribeRouter">
            <summary>
            A router interface to support publish/subscribe traffic routing on buses
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IPublishSubscribeRouter">
            <summary>
            A router interface to support publish/subscribe traffic routing
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IRouterBase">
            <summary>
            Base router interface
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.IRouterBase.Identifier">
            <summary>
            Router (or message bus) internal identifier
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IPublishSubscribeRouter.RoutePublish(Eze.Ims.Platform.Api.PublicationMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Routes publication message
            </summary>
            <param name="topicDetails">Publication message metadata</param>
            <param name="topicData">Publication payload</param>
            <param name="origin">Originating router identifier</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IPublishSubscribeRouter.RouteSubscribe(Eze.Ims.Platform.Api.SubscriptionMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Routes 'subscribe' message
            </summary>
            <param name="topicDetails">Subscribe message metadata</param>
            <param name="topicCriteria">Subscription criteria object</param>
            <param name="origin">Originating router identifier</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IPublishSubscribeRouter.RouteUnsubscribe(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Routes 'unsubscribe' message
            </summary>
            <param name="topicDetails">Unsubscribe message metadata</param>
            <param name="origin">Originating router identifier</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IPublishSubscribeRouter.RegisterPublisher(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Processes and routes publisher registration
            </summary>
            <param name="topicDetails">Subscription metadata</param>
            <param name="origin">Originating router identifier</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IPublishSubscribeRouter.UnregisterPublisher(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Processes and routes publisher un-registration
            </summary>
            <param name="topicDetails">Subscription metadata</param>
            <param name="origin">Originating router identifier</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IPublishSubscribeRouter.SendOutOfBandMessage(Eze.Ims.Platform.Api.PublicationMetadata,Eze.Ims.Platform.Communication.OutOfBandInformation,System.Boolean,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Routes out-of-band message for a publication
            </summary>
            <param name="topicDetails">Publication metadata</param>
            <param name="outofbandData">Ou-of-band data</param>
            <param name="propagate">Propagate message to other buses when routing</param>
            <param name="origin">Originating router identifier</param>
            <returns>Completion task</returns>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IBusRouterBase">
            <summary>
            Base bus router interface
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IBusRouterBase.RoutesOut``1(``0)">
            <summary>
            Checks whether a particular message can be sent through this router
            </summary>
            <typeparam name="T">Type of message metadata</typeparam>
            <param name="metadata">Message metadata</param>
            <returns>True if message can be routed (this can also be dependednt on connectivity state)</returns>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.IBusRouterBase.MessageBusScope">
            <summary>
            Message bus scope. Controls if routing of External/Internal metadata is allowed
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Shared.Interface.DataContracts.DateTimeOffsetSurrogate">
            <summary>
            A surrogate class for protobuf-net serialization of .NET's <see cref="T:System.DateTimeOffset"/> type
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.Interface.DataContracts.DateTimeOffsetSurrogate.op_Implicit(System.DateTimeOffset)~Eze.Ims.Platform.Shared.Interface.DataContracts.DateTimeOffsetSurrogate">
            <summary>
            Implicit converter to convert from <see cref="T:System.DateTimeOffset"/> to <see cref="T:Eze.Ims.Platform.Shared.Interface.DataContracts.DateTimeOffsetSurrogate"/>
            </summary>
            <param name="value">A <see cref="T:System.DateTimeOffset"/> value</param>
            <returns>A <see cref="T:Eze.Ims.Platform.Shared.Interface.DataContracts.DateTimeOffsetSurrogate"/></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.Interface.DataContracts.DateTimeOffsetSurrogate.op_Implicit(Eze.Ims.Platform.Shared.Interface.DataContracts.DateTimeOffsetSurrogate)~System.DateTimeOffset">
            <summary>
            Implicit converter to convert from <see cref="T:Eze.Ims.Platform.Shared.Interface.DataContracts.DateTimeOffsetSurrogate"/> to <see cref="T:System.DateTimeOffset"/>
            </summary>
            <param name="value">A <see cref="T:Eze.Ims.Platform.Shared.Interface.DataContracts.DateTimeOffsetSurrogate"/> value</param>
            <returns>A <see cref="T:System.DateTimeOffset"/></returns>
        </member>
        <member name="P:Eze.Ims.Platform.Shared.Interface.DataContracts.DateTimeOffsetSurrogate.DateTimeTicks">
            <summary>
            See DateTimeOffset.<see cref="P:System.DateTimeOffset.Ticks"/> 
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Shared.Interface.DataContracts.DateTimeOffsetSurrogate.OffsetMinutes">
            <summary>
            See DateTimeOffset.<see cref="P:System.DateTimeOffset.Offset"/>'s TotalMinutes property  
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.EzeConnectionState">
            <summary>
            Enumeration of connection states
            </summary>
        </member>
        <member name="F:Eze.Ims.Platform.Communication.Interface.EzeConnectionState.Closed">
            <summary>
            Connection is closed
            </summary>
        </member>
        <member name="F:Eze.Ims.Platform.Communication.Interface.EzeConnectionState.Faulted">
            <summary>
            Connection in faulted state
            </summary>
        </member>
        <member name="F:Eze.Ims.Platform.Communication.Interface.EzeConnectionState.Opened">
            <summary>
            Connection is open
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Shared.Interface.ConnectionStateChangeEventArgs">
            <summary>
            Container class for connection state passed as event agrs
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Shared.Interface.ConnectionStateChangeEventArgs.NewState">
            <summary>
            New connection state
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IAEADProvider">
            <summary>
            IAEADProvider interface provides necessary primitives for authenticated encryption/decrypton and MAC calculation
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAEADProvider.AuthenticatedEncrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Performs authenticated encryption of <paramref name="secretMessage"/> and <paramref name="nonSecretPayload"/> with a given <paramref name="key"/>
            </summary>
            <param name="secretMessage">Plaintext to be encrypted and authenticated</param>
            <param name="key">Secret key used to encrypt message. Key length must be <see cref="P:Eze.Ims.Platform.Communication.Interface.IAEADProvider.KeyByteSize"/> bytes</param>
            <param name="nonSecretPayload">Non-encrypted authenticated payload</param>
            <returns>Encrypted authenticated ciphertext</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAEADProvider.TryAuthenticatedDecrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[]@)">
            <summary>
            Performs authenticated decryption of <paramref name="encryptedMessage"/> using <paramref name="nonSecretPayload"/> and a <paramref name="key"/>
            If decryption is successful sets <paramref name="decryptedMessage"/>
            </summary>
            <param name="encryptedMessage">Ciphertext to be decrypted and authenticated</param>
            <param name="key">Encryption key used to encrypt the message. Key length must be <see cref="P:Eze.Ims.Platform.Communication.Interface.IAEADProvider.KeyByteSize"/> bytes</param>
            <param name="nonSecretPayload">Non-encrypted authenticated payload</param>
            <param name="decryptedMessage">(out) Decrypted message is successful</param>
            <returns>True if successfully decrypted and authenticated the <paramref name="encryptedMessage"/></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAEADProvider.TryAuthenticatedDecrypt(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte[]},System.Byte[],System.Byte[]@)">
            <summary>
            Performs authenticated decryption of <paramref name="encryptedMessage"/> using <paramref name="nonSecretPayload"/> and a <paramref name="keys"/>
            If decryption is successful sets <paramref name="decryptedMessage"/>
            </summary>
            <param name="encryptedMessage">Ciphertext to be decrypted and authenticated</param>
            <param name="keys">Encryption keys to try to decrypt the message. Key length must be <see cref="P:Eze.Ims.Platform.Communication.Interface.IAEADProvider.KeyByteSize"/> bytes</param>
            <param name="nonSecretPayload">Non-encrypted authenticated payload</param>
            <param name="decryptedMessage">(out) Decrypted message is successful</param>
            <returns>True if successfully decrypted and authenticated the <paramref name="encryptedMessage"/></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAEADProvider.NewKey">
            <summary>
            Generates a new encryption key of required length of <see cref="P:Eze.Ims.Platform.Communication.Interface.IAEADProvider.KeyByteSize"/>
            </summary>
            <returns>Encryption key</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAEADProvider.GetKeyFromPassword(System.String,System.Byte[]@)">
            <summary>
            Generates a new encryption key of required length of <see cref="P:Eze.Ims.Platform.Communication.Interface.IAEADProvider.KeyByteSize"/> based on a string password
            </summary>
            <param name="password">Password string used to derive an encryption key</param>
            <param name="salt">(ref) optional salt value. If null reference is passed then a random value will be generated, which is then used to derive a key, and then returned</param>
            <returns>Encryption key</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAEADProvider.DeriveKey(System.Byte[],System.String,System.Byte[])">
            <summary>
            Derives a new key from a master key
            </summary>
            <param name="masterKey">The master key used for key derivation</param>
            <param name="label">A label denoting an intended use or purpose for the key.</param>
            <param name="context">Binary data containing contextual information (may include any shared data available, e.g. a nonce, a session id, an identity, etc)</param>
            <returns>Derived encryption key</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAEADProvider.ComputeMac(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes MAC hash
            </summary>
            <param name="key">Can be any length. Recommended size is <see cref="P:Eze.Ims.Platform.Communication.Interface.IAEADProvider.RecommendedMacKeyByteSize"/></param>
            <param name="data">The input to compute the hash code for</param>
            <param name="offset">The offset into the byte array from which to begin using data</param>
            <param name="length">The number of bytes in the array to use as data</param>
            <returns>The computed hash code</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAEADProvider.VerifyMac(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Verifies MAC hash
            </summary>
            <param name="mac">Message authentication code we want to verify against message data</param>
            <param name="key">Can be any length. Recommended size is <see cref="P:Eze.Ims.Platform.Communication.Interface.IAEADProvider.RecommendedMacKeyByteSize"/> (64) bytes <see cref="T:System.Security.Cryptography.HMACSHA256"/></param>
            <param name="data">The input to compute the hash code for</param>
            <param name="offset">The offset into the byte array from which to begin using data</param>
            <param name="length">The number of bytes in the array to use as data</param>
            <returns>True if message data is verified againt the mac</returns>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.IAEADProvider.SaltByteSize">
            <summary>
            Salt size in bytes used by implementation
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.IAEADProvider.KeyByteSize">
            <summary>
            Encryption key size in bytes used by implementation
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.IAEADProvider.MacByteSize">
            <summary>
            MAC hash size in bytes used by implementation
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.IAEADProvider.RecommendedMacKeyByteSize">
            <summary>
            Recommended size of the key material for MAC hasher
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IAuthenticationCommunicationClient">
            <summary>
            This interface is used to provide methods for user session management and connection state tracking
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAuthenticationCommunicationClient.Authenticate(Eze.Ims.Platform.Api.UserSessionRequest)">
            <summary>
            Authenticates a user and creates a user session
            </summary>
            <param name="authenticationDetails">User authentication request object, containing user credentials, etc.</param>
            <returns>Task, which returns a UserSessionResponse</returns>
            <seealso cref="T:Eze.Ims.Platform.Api.UserSessionRequest"/>
            <seealso cref="T:Eze.Ims.Platform.Api.UserSessionResponse"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAuthenticationCommunicationClient.ChangePassword(Eze.Ims.Platform.Api.PasswordRequest)">
            <summary>
            Changes user password
            </summary>
            <param name="changePasswordDetails">Password change request obejct</param>
            <returns>Task, which returns a PasswordResponse</returns>
            <seealso cref="T:Eze.Ims.Platform.Api.PasswordRequest"/>
            <seealso cref="T:Eze.Ims.Platform.Api.PasswordResponse"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAuthenticationCommunicationClient.Deauthenticate">
            <summary>
            Deauthenticates current user session
            </summary>
            <returns>Task, which completes when user session has been deauthenticated (logged off)</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAuthenticationCommunicationClient.ProcessSessionCreation(Eze.Ims.Platform.Api.SessionIdentifier)">
            <summary>
            Notifies all routers that a new (client) session has been created
            </summary>
            <param name="sessionId">New session's identifier</param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAuthenticationCommunicationClient.ProcessSessionDeletion(Eze.Ims.Platform.Api.SessionIdentifier)">
            <summary>
            Notifies all routers that a (client) session has been deleted
            </summary>
            <param name="sessionId">Deleted session's identifier</param>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.IAuthenticationCommunicationClient.ConnectionState">
            <summary>
            Gets connection state and notifications of changes in connection state via <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.IAuthenticationCommunicationClient.EncryptedSession">
            <summary>
            Gets session encryption setting
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.IAuthenticationCommunicationClient.HasAuthenticatedUserSession">
            <summary>
            Gets a state of existense of an authenticated user session 
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.IAuthenticationCommunicationClient.AuthenticationInfo">
            <summary>
            Gets current authentication information (includes session id)
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.IAuthenticationCommunicationClient.SupportedEncryptionProtocols">
            <summary>
            Gets a list of supported encryption protocols.
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IAuthenticationRouter">
            <summary>
            A router interface for authentication
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAuthenticationRouter.StartSRPAuthenticationRequest(Eze.Ims.Platform.Api.StartUserSRPTransactionRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Initiates the process of authenticating  (logging on) a user using SRP
            </summary>
            <param name="topicDetails">A user srp transaction initiation request</param>
            <param name="origin">Originating router identifier</param>
            <returns>Task which returns information about the SRP transaction being started upon completion</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAuthenticationRouter.CompleteSRPAuthenticationRequest(Eze.Ims.Platform.Api.UserSRPSessionRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Completes the process of authenticating  (logging on) a user using SRP
            </summary>
            <param name="topicDetails">A user session request containgn srp transaction completion data computed on the client or on the <see cref="M:Eze.Ims.Platform.Communication.Interface.IAuthenticationRouter.StartSRPAuthenticationRequest(Eze.Ims.Platform.Api.StartUserSRPTransactionRequest,Eze.Ims.Platform.Api.NetworkIdentifier)"/> step </param>
            <param name="origin">Originating router identifier</param>
            <returns>Task which returns user session information upon completion</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAuthenticationRouter.AuthenticationRequest(Eze.Ims.Platform.Api.UserSessionRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Authenticates (logs on) a user
            </summary>
            <param name="topicDetails">A user session initiation request</param>
            <param name="origin">Originating router identifier</param>
            <returns>Task which returns user session information upon completion</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAuthenticationRouter.DeauthenticationRequest(Eze.Ims.Platform.Api.LogoffRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Deauthenticates (logs off) a user
            </summary>
            <param name="request">A logoff request</param>
            <param name="origin">Originating router identifier</param>
            <returns>Logoff task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAuthenticationRouter.ChangePassword(Eze.Ims.Platform.Api.PasswordRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Changes user's password
            </summary>
            <param name="topicDetails">Change password request</param>
            <param name="origin">Originating router identifier</param>
            <returns>Password change response task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IAuthenticationRouter.Start">
            <summary>
            Initializes and starts the router
            </summary>
            <returns>Router initialization task</returns>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IBusAuthenticationRouter">
            <summary>
            A router interface for bus authentication
            </summary>	
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IBusAuthenticationRouter.Connect(Eze.Ims.Platform.Api.RouterAuthenticationInfo)">
            <summary>
            Connects/authenticates router bus
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IBusAuthenticationRouter.Disconnect">
            <summary>
            Disconnects router bus
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IBusAuthenticationRouter.ProcessSessionCreation(Eze.Ims.Platform.Api.SessionIdentifier)">
            <summary>
            Notifies router that a new (client) session has been created, so that router can pre-create external objects for the session (e.g. response queues)
            </summary>
            <param name="sessionId">Session identifier</param>
            <returns></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IBusAuthenticationRouter.ProcessSessionDeletion(Eze.Ims.Platform.Api.SessionIdentifier)">
            <summary>
            Notifies router that a (client) session has been deleted, so that router can delete any external objects for the session (e.g. response queues)
            </summary>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.IBusAuthenticationRouter.CanAuthenticate">
            <summary>
            Gets a value indicating if router supports authentication
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.IBusAuthenticationRouter.IsConnected">
            <summary>
            Gets a value indicating if router is connected to underlying messaging channel
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IBusCommunicationRouter">
            <summary>
            Base interface for all message buses (communication routers)
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IBusRequestResponseRouter">
            <summary>
            A router interface to support request/response traffic routing for buses
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IRequestResponseRouter">
            <summary>
            A router interface to support request/response traffic routing
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseRouter.RouteRequest(Eze.Ims.Platform.Api.RequestMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Routes request message
            </summary>
            <param name="topicDetails">Request metadata</param>
            <param name="topicDataIn">Request payload</param>
            <param name="origin">Originating router identifier</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseRouter.RouteResponse(Eze.Ims.Platform.Api.RequestMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Routes response message
            </summary>
            <param name="topicDetails">Response metadata</param>
            <param name="topicDataOut">Response payload</param>
            <param name="origin">Originating router identifier</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseRouter.RegisterRequestHandler(Eze.Ims.Platform.Api.RequestServiceMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Processes and routes registration of request handler/service
            </summary>
            <param name="topicDetails">Request service metadata</param>
            <param name="origin">Originating router identifier</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseRouter.UnregisterRequestHandler(Eze.Ims.Platform.Api.RequestServiceMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Processes and routes un-registration of request handler/service
            </summary>
            <param name="topicDetails">Request service metadata</param>
            <param name="origin">Originating router identifier</param>
            <returns>Completion task</returns>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.ICommunicationRouterBase">
            <summary>
            Base interface for communication routers
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationRouterBase.RouteCommunicationNodeState(Eze.Ims.Platform.Api.CommunicationNodeStateMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Routes changes to communication node state
            </summary>
            <param name="stateDetails">New state metadata</param>
            <param name="origin">Originating router identifier</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationRouterBase.PollForChanges(Eze.Ims.Platform.Communication.PollRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Polls message buses for any incoming messages (publications, responses, etc)
            </summary>
            <param name="requestDetails">Poll request</param>
            <param name="origin">Originating router identifier</param>
            <returns>Polled data</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IBusCommunicationRouter.SetCoreRouter(Eze.Ims.Platform.Communication.Interface.ICoreCommunicationRouter,System.Action{Eze.Ims.Platform.Communication.EzeMessagingErrorArgs})">
            <summary>
            Sets core router for the bus
            </summary>
            <param name="router">Core router</param>
            <param name="onErrorActon">An action to be called to notify of errors</param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IBusCommunicationRouter.SetConfiguration(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Provides bus with a dictionary with configuration values
            </summary>
            <param name="configuration">Configuration dictionary</param>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.ICommonMetadataContextManager">
            <summary>
            A wrapper around the CallContextPropertyManager to treat all of the CommonMetadata loggable properties as an atomic unit
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommonMetadataContextManager.Set(Eze.Ims.Platform.Api.ICommonMetadata)">
            <summary>
            Push the new set of common metadata into the call context.  When the returned object is disposed, revert the call context to the previous values.
            </summary>
            <param name="metadata">The common metadata</param>
            <returns>An object that will revert the call context to its previous state when disposed</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommonMetadataContextManager.Get">
            <summary>
            Get the current common metadata-related information stored in the call context and group it into a an object implementing ICommonMetadata interface.
            </summary>
            <returns>A common metadata object representing the current context information or null if no common metadata related information is currently in the call contex</returns>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.ICommunicationConnectionState">
            <summary>
            Interface to get connection state
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.ICommunicationConnectionState.State">
            <summary>
            Connnection state property
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.SubscriptionChangeNotification`1">
            <summary>
            A delegate type used to notify a publisher of subscription changes, such as adding/removing subscribers 
            </summary>
            <typeparam name="TCriteria">A criteria type</typeparam>
            <param name="subscriptionCriteria">Subscription criteria object</param>
            <param name="subscriptionMetadata">Subscription metadata</param>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider">
            <summary>
            Container interface for IRequestResponseClient, IRequestResponseService, ISubscriptionClient, IPublicationService,
            IAuthenticationCommunicationClient, IServiceCommunicationInitializer
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IRequestResponseClient">
            <summary>
            Defines the interface for how clients interact with services for request-reply actions
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseClient.Request``1(Eze.Ims.Platform.Api.ITopic{``0})">
            <summary>
            Submits a request on the given topic with the given topic data.  
            </summary>
            <typeparam name="TIn">The topic data input type</typeparam>
            <param name="topic">The topic and its associated input data</param>
            <returns>A task which completes whenever the executor of the request considers it to have succeeded or failed.</returns>
            <example>
            AuditMessage auditMessage;
            //...
            Task auditCompletedTask = agentProxy.Request(new AuditTopic(auditMessage));
            auditCompletedTask.OnError(ReportException, TaskScheduler.Default);		
            </example>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseClient.Request``1(Eze.Ims.Platform.Api.ITopic{``0},System.Int32)">
            <summary>
            Admin-only call. Submits a request on the given topic with the given topic data.  
            </summary>
            <typeparam name="TIn">The topic data input type</typeparam>
            <param name="topic">The topic and its associated input data</param>
            <param name="firmId">The targeted firmId for the request.  Only required for cross-silo requests</param>
            <returns>A task which completes whenever the executor of the request considers it to have succeeded or failed.</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseClient.Request``1(Eze.Ims.Platform.Api.ITopic{``0},System.Threading.CancellationToken)">
            <summary>
            Submits a request on the given topic with the given topic data.  
            </summary>
            <typeparam name="TIn">The topic data input type</typeparam>
            <param name="topic">The topic and its associated input data</param>
            <param name="cancellationToken">A token generated by a CancellationTokenSource which controls whether the request is cancelled or not</param>
            <returns>A task which completes whenever the executor of the request considers it to have succeeded or failed.  Or the task is cancelled when the cancellation token transitions to the Cancelled state.</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseClient.Request``1(Eze.Ims.Platform.Api.ITopic{``0},System.Threading.CancellationToken,System.Int32)">
            <summary>
            Admin-only call. Submits a request on the given topic with the given topic data.
            </summary>
            <typeparam name="TIn">The topic data input type</typeparam>
            <param name="topic">The topic and its associated input data</param>
            <param name="cancellationToken">A token generated by a CancellationTokenSource which controls whether the request is cancelled or not</param>
            <param name="firmId">The targeted firmId for the request.  Only required for cross-silo requests</param>
            <returns>A task which completes whenever the executor of the request considers it to have succeeded or failed.  Or the task is cancelled when the cancellation token transitions to the Cancelled state.</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseClient.Request``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <summary>
            Sends a request to register for the given topic with the provided topic data with an expected result of type TOut.  
            </summary>
            <typeparam name="TIn">The topic data input type</typeparam>
            <typeparam name="TOut">The topic data output type</typeparam>
            <param name="topic">The topic</param>
            <returns>A task - if the task completes successfully, the task Result is the result of the request.</returns>
            <example>
            agentProxy.Request(new ProfileCatalogTopic("get")).Pipeline(task => ProcessProfileCatalogs(task.Result), TaskScheduler.Default);
            </example>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseClient.Request``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Int32)">
            <inheritdoc cref="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseClient.Request``2(Eze.Ims.Platform.Api.ITopic{``0,``1})"/>
            <param name="firmId">Firm identifier</param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseClient.Request``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseClient.Request``2(Eze.Ims.Platform.Api.ITopic{``0,``1})"/>
            <param name="cancellationToken">Request cancellation token</param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseClient.Request``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Threading.CancellationToken,System.Int32)">
            <inheritdoc cref="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseClient.Request``2(Eze.Ims.Platform.Api.ITopic{``0,``1})"/>
            <param name="cancellationToken">Request cancellation token</param>
            <param name="firmId">Firm identifier</param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseClient.Request``2(Eze.Ims.Platform.Api.ITopic{``0,System.Collections.Generic.IEnumerable{``1}},System.Collections.Concurrent.IProducerConsumerCollection{``1})">
            <summary>
            Sends a request to the agent for the given topic with the provided topic data and expects a result that can be
            decomposed into a sequence of partial results.  If a non-null callback is provided, a callback
            will be made whenever the executor of the requests considers it to have succeeded or failed.
            </summary>
            <typeparam name="TIn">The topic data input type</typeparam>
            <typeparam name="TOut">The topic data output type</typeparam>
            <param name="topic">The topic</param>
            <param name="partialResults">A pre-allocated provide a thread-safe collection which
            may have some of the requested data stored in it prior to the completion of the request.</param>
            <example>
            ConcurrentQueue&lt;ProfileCatalogData&gt; resultQueue = new ConcurrentQueue&lt;ProfileCatalogData&gt;();
            agentProxy.Request(new ProfileCatalogTopic("get"), resultQueue,
              completionInfo =>
              {
                if (completionInfo.RequestFailed) 
                  ReportException(completionInfo.ExceptionDetails);
              });
            //...
            ProfileCatalogData partialData;
            if (resultQueue.TryDequeue(out partialData))
            {
              //...
            }
            </example>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseClient.Request``2(Eze.Ims.Platform.Api.ITopic{``0,System.Collections.Generic.IEnumerable{``1}},System.Collections.Concurrent.IProducerConsumerCollection{``1},System.Int32)">
            <inheritdoc cref="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseClient.Request``2(Eze.Ims.Platform.Api.ITopic{``0,System.Collections.Generic.IEnumerable{``1}},System.Collections.Concurrent.IProducerConsumerCollection{``1})"/>
            <param name="firmId">Firm identifier</param>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IRequestResponseService">
            <summary>
             Defines the interface for how services declare which request-reply actions they will handle
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseService.RegisterRequestService``1(Eze.Ims.Platform.Api.ITopic{``0},Eze.Ims.Platform.Communication.IRequestHandler{``0})">
            <summary>
            Registers a service to handle requests on a given topic
            </summary>
            <param name="topic">The topic to register</param>
            <param name="requestHandler">Request handler</param>
            <typeparam name="TIn">The topic data input type</typeparam>
            <returns>A completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseService.RegisterRequestService``1(Eze.Ims.Platform.Api.ITopic{``0},Eze.Ims.Platform.Communication.IRequestHandler{``0},Eze.Ims.Platform.Api.RequestServiceSettings)">
            <inheritdoc cref="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseService.RegisterRequestService``1(Eze.Ims.Platform.Api.ITopic{``0},Eze.Ims.Platform.Communication.IRequestHandler{``0})"/>
            <param name="settings">Request service settings. Allows to configure parallelism (default is one request at a time)</param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseService.RegisterRequestService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.IRequestHandler{``0,``1})">
            <summary>
            Registers a service to handle requests on a given topic
            </summary>
            <param name="topic">The topic to register</param>
            <param name="requestHandler">Request handler</param>
            <typeparam name="TIn">The topic data input type</typeparam>
            <typeparam name="TOut">The topic data output type</typeparam>
            <returns>A completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseService.RegisterRequestService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.IRequestHandler{``0,``1},Eze.Ims.Platform.Api.RequestServiceSettings)">
            <inheritdoc cref="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseService.RegisterRequestService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.IRequestHandler{``0,``1})"/>
            <param name="settings">Request service settings. Allows to configure parallelism (default is one request at a time)</param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseService.UnregisterRequestService``1(Eze.Ims.Platform.Api.ITopic{``0})">
            <summary>
            Unregisters a service from handling requests on a given topic
            </summary>
            <param name="topic">The topic to unregister</param>
            <typeparam name="TIn">The topic data input type</typeparam>
            <returns>A completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseService.UnregisterRequestService``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <inheritdoc cref="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseService.UnregisterRequestService``1(Eze.Ims.Platform.Api.ITopic{``0})"/>
            <typeparam name="TOut">The topic data output type</typeparam>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseService.RegisterResourceService``1(Eze.Ims.Platform.Api.IResourceTopic{``0},Eze.Ims.Platform.Api.IResourceRequestHandler{``0})">
            <summary>
            Registers a service to handle CRUD operations on a resource
            </summary>
            <param name="resourceTopic">The resource topic</param>
            <param name="resourceRequestHandler">Handler to handle resource operations</param>
            <typeparam name="TResource">The resource type</typeparam>
            <returns>A completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseService.RegisterResourceService``1(Eze.Ims.Platform.Api.IResourceTopic{``0},Eze.Ims.Platform.Api.IResourceRequestHandler{``0},Eze.Ims.Platform.Api.RequestServiceSettings)">
            <inheritdoc cref="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseService.RegisterResourceService``1(Eze.Ims.Platform.Api.IResourceTopic{``0},Eze.Ims.Platform.Api.IResourceRequestHandler{``0})"/>
            <param name="settings">Request service settings. Allows to configure parallelism (default is one request at a time)</param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseService.UnregisterResourceService``1(Eze.Ims.Platform.Api.IResourceTopic{``0})">
            <summary>
            Unregisters a resource handler for a given topic
            </summary>
            <param name="resourceTopic">The resource topic</param>
            <typeparam name="TResource">The resource type</typeparam>
            <returns>A completion task</returns>
        </member>
        <member name="T:Eze.Ims.Platform.Shared.ISubscriptionClient">
            <summary>
            An interface to create, update, and delete topic-based data subscriptions
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.ISubscriptionClient.Subscribe``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.ISubscriptionHandler{``1})">
            <summary>
            Notifies the agent of interest in a topic and registers with a callback object.  The task completes when
            the agent acknowledges the request.  If the request is successful, it returns an opaque SubscriptionIdentifier
            which can be used later to modify the subscription information.
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="topic"></param>
            <param name="handler"></param>
            <returns>SubscriptionIdentifier, which can be used to update subscription and to unsubscribe</returns>
            <remarks>To maintain an active subscription user of this API must keep a reference to returned SubscribtionIdentifier. If the reference is abandoned and subscription identifier is garbage collected, the messaging layer will automatically unsubscribe this subscription</remarks>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.ISubscriptionClient.UpdateSubscription``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Api.SubscriptionIdentifier)">
            <summary>
            Modifies the subscription request for the topic.  Requires the SubscriptionIdentifier for the existing Subscribe.  
            If the request is successful, it returns an updated SubscriptionIdentifier which can be used later to update the
            topic information again or unsubscribe.
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="topic"></param>
            <param name="identifier">SubscriptionIdentifier for the subscription to be updated. Note that a new identifier will be returned for updated subscription.</param>
            <returns>SubscriptionIdentifier, which can be used to update subscription and to unsubscribe</returns>
            <remarks>To maintain an active subscription user of this API must keep a reference to returned SubscribtionIdentifier. If the reference is abandoned and subscription identifier is garbage collected, the messaging layer will automatically unsubscribe this subscription</remarks>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.ISubscriptionClient.Unsubscribe``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Api.SubscriptionIdentifier)">
            <summary>
            Unregisters the subscription request for the topic.  Requires the SubscriptionIdentifier for the existing Subscribe.
            If the request is successful, the Task completes without errors, otherwise the Task will raise an error on completion of the request.
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="topic"></param>
            <param name="identifier">SubscriptionIdentifier for the subscription to unsubscribe from</param>
            <returns></returns>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IPublicationService">
            <summary>
            Publication service interface
            </summary>
            <remarks>Used to register service for incoming subscriptions and to publish data to subscribers</remarks>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IPublicationService.RegisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <summary>
            Registers subscription service
            </summary>
            <typeparam name="TCriteria">Criteria object type</typeparam>
            <typeparam name="TData">Publication payload type</typeparam>
            <param name="topic">Subscription topic</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IPublicationService.RegisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.Interface.SubscriptionChangeNotification{``0},Eze.Ims.Platform.Communication.Interface.SubscriptionChangeNotification{``0})">
            <summary>
            Registers subscription service with subscribe/un-subscribe notification delegates
            </summary>
            <typeparam name="TCriteria">Criteria object type</typeparam>
            <typeparam name="TData">Publication payload type</typeparam>
            <param name="topic">Subscription topic</param>
            <param name="subscriptionNotification">Add subscriber notification delegate</param>
            <param name="unsubscriptionNotification">Remove subscriber notification delegate</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IPublicationService.RegisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.IFilterPlugin{``0,``1})">
            <summary>
            Registers subscription service with publication filter plugin
            </summary>
            <typeparam name="TCriteria">Criteria object type</typeparam>
            <typeparam name="TData">Publication payload type</typeparam>
            <param name="topic">Subscription topic</param>
            <param name="filterPlugin">Publication filter plugin</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IPublicationService.RegisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.IFilterPlugin{``0,``1},Eze.Ims.Platform.Communication.Interface.SubscriptionChangeNotification{``0},Eze.Ims.Platform.Communication.Interface.SubscriptionChangeNotification{``0})">
            <summary>
            Registers subscription service with  publication filter plugin and subscribe/un-subscribe notification delegates
            </summary>
            <typeparam name="TCriteria">Criteria object type</typeparam>
            <typeparam name="TData">Publication payload type</typeparam>
            <param name="topic">Subscription topic</param>
            <param name="filterPlugin">Publication filter plugin</param>
            <param name="subscriptionNotification">Add subscriber notification delegate</param>
            <param name="unsubscriptionNotification">Remove subscriber notification delegate</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IPublicationService.UnregisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <summary>
            Un-registers subscrption service
            </summary>
            <typeparam name="TCriteria">Criteria object type</typeparam>
            <typeparam name="TData">Publication payload type</typeparam>
            <param name="topic">Subscription topic</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IPublicationService.Publish``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <summary>
            Publishes data on a topic
            </summary>
            <typeparam name="TCriteria">Criteria object type</typeparam>
            <typeparam name="TData">Publication payload type</typeparam>
            <param name="topic">Subscription topic</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IPublicationService.Publish``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Collections.Generic.IEnumerable{Eze.Ims.Platform.Api.SessionIdentifier},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Publishes data on a topic
            </summary>
            <typeparam name="TCriteria">Criteria object type</typeparam>
            <typeparam name="TData">Publication payload type</typeparam>
            <param name="topic">Subscription topic</param>
            <param name="filterSessionIds">Collection of session identifiers to publish to</param>
            <param name="filterFirmIds">Collection of firm identifiers to publish to</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IPublicationService.Publish``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Collections.Generic.IEnumerable{Eze.Ims.Platform.Api.SubscriptionIdentifier})">
            <summary>
            Publishes data on a topic
            </summary>
            <typeparam name="TCriteria">Criteria object type</typeparam>
            <typeparam name="TData">Publication payload type</typeparam>
            <param name="topic">Subscription topic</param>
            <param name="targetedSubscriptionIds">Collection of subscription identifiers to publish to</param>
            <returns>Completion task</returns>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IServiceCommunicationInitializer">
            <summary>
            Provides methods to start communications layer
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IServiceCommunicationInitializer.StartBuses">
            <summary>
            Synchronous call to start communication buses
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IServiceCommunicationInitializer.StartBusesAsync">
            <summary>
            Asynchronous call to start communication buses
            </summary>
            <returns>Task which completes when communication layer has started</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.RegisterServiceAvailabilityMonitor``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Action{System.String,System.Boolean})">
            <summary>
            Registers service availability monitor for 2-way topics
            </summary>
            <typeparam name="TIn">Topic's TIn type</typeparam>
            <typeparam name="TOut">Topic's TOut type</typeparam>
            <param name="topic">Topic</param>
            <param name="availabilityCallback">Availability callback handler to register</param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.RegisterServiceAvailabilityMonitor``1(Eze.Ims.Platform.Api.ITopic{``0},System.Action{System.String,System.Boolean})">
            <summary>
            Registers service availability monitor for 1-way topics
            </summary>
            <typeparam name="TIn">Topic's TIn type</typeparam>
            <param name="topic">Topic</param>
            <param name="availabilityCallback">Availability callback handler to register</param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.UnregisterServiceAvailabilityMonitor``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Action{System.String,System.Boolean})">
            <summary>
            Un-registers service availability monitor
            </summary>
            <typeparam name="TIn">Topic's TIn type</typeparam>
            <typeparam name="TOut">Topic's TOut type</typeparam>
            <param name="topic">Topic</param>
            <param name="availabilityCallback">Availability callback handler to unregister</param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.UnregisterServiceAvailabilityMonitor``1(Eze.Ims.Platform.Api.ITopic{``0},System.Action{System.String,System.Boolean})">
            <summary>
            Un-registers service availability monitor
            </summary>
            <typeparam name="TIn">Topic's TIn type</typeparam>
            <param name="topic">Topic</param>
            <param name="availabilityCallback">Availability callback handler to unregister</param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.CheckServiceAvailability``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <summary>
            Checks service availbility for 2-way topics
            </summary>
            <typeparam name="TIn">Topic's TIn type</typeparam>
            <typeparam name="TOut">Topic's TOut type</typeparam>
            <param name="topic">Topic</param>
            <returns></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.CheckServiceAvailability``1(Eze.Ims.Platform.Api.ITopic{``0})">
            <summary>
            Checks service availbility for 1-way topics
            </summary>
            <typeparam name="TIn">Topic's TIn type</typeparam>
            <param name="topic">Topic</param>
            <returns></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.RegisterRequestService``1(Eze.Ims.Platform.Api.ITopic{``0},Eze.Ims.Platform.Communication.IRequestHandler{``0})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.RegisterRequestService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.IRequestHandler{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.UnregisterRequestService``1(Eze.Ims.Platform.Api.ITopic{``0})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.UnregisterRequestService``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.Request``1(Eze.Ims.Platform.Api.ITopic{``0})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.Request``1(Eze.Ims.Platform.Api.ITopic{``0},System.Int32)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.Request``1(Eze.Ims.Platform.Api.ITopic{``0},System.Threading.CancellationToken)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.Request``1(Eze.Ims.Platform.Api.ITopic{``0},System.Threading.CancellationToken,System.Int32)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.Request``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.Request``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Int32)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.Request``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Threading.CancellationToken)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.Request``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Threading.CancellationToken,System.Int32)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.Request``2(Eze.Ims.Platform.Api.ITopic{``0,System.Collections.Generic.IEnumerable{``1}},System.Collections.Concurrent.IProducerConsumerCollection{``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.Request``2(Eze.Ims.Platform.Api.ITopic{``0,System.Collections.Generic.IEnumerable{``1}},System.Collections.Concurrent.IProducerConsumerCollection{``1},System.Int32)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.RegisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.RegisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.Interface.SubscriptionChangeNotification{``0},Eze.Ims.Platform.Communication.Interface.SubscriptionChangeNotification{``0})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.RegisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.IFilterPlugin{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.RegisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.IFilterPlugin{``0,``1},Eze.Ims.Platform.Communication.Interface.SubscriptionChangeNotification{``0},Eze.Ims.Platform.Communication.Interface.SubscriptionChangeNotification{``0})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.UnregisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.Publish``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.Publish``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Collections.Generic.IEnumerable{Eze.Ims.Platform.Api.SessionIdentifier},System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.Publish``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Collections.Generic.IEnumerable{Eze.Ims.Platform.Api.SubscriptionIdentifier})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.Subscribe``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.ISubscriptionHandler{``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.UpdateSubscription``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Api.SubscriptionIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.Unsubscribe``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Api.SubscriptionIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.Authenticate(Eze.Ims.Platform.Api.UserSessionRequest)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.ChangePassword(Eze.Ims.Platform.Api.PasswordRequest)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.StartBuses">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.Deauthenticate">
            <inheritDoc/>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.ICommunicationProvider.ConnectionState">
            <inheritDoc/>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.ICoreCommunicationRouter">
            <summary>
            Base interface for core router
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.ICoreCommunicationRouter.GetSecureMessageHelper">
            <summary>
            Gets SecureMessageHelper instance
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Shared.Interface.IExceptionTrackingDisposable">
            <summary>
            An Disposable with flag indicate whether Exceptions occured and thrown 
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Shared.Interface.IExceptionTrackingDisposable.HasException">
            <summary>
            Has Exceptions occured and thrown before dispose in the call stack
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IDuplexCommunicationRouter">
            <summary>
            Base intreface for WCF duplex buses
            TODO: check if it's used anywhere
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IDuplexCommunicationRouter.RouteRequest(Eze.Ims.Platform.Api.RequestMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IDuplexCommunicationRouter.RouteResponse(Eze.Ims.Platform.Api.RequestMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IDuplexCommunicationRouter.RoutePublish(Eze.Ims.Platform.Api.PublicationMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IDuplexCommunicationRouter.RouteSubscribe(Eze.Ims.Platform.Api.SubscriptionMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IDuplexCommunicationRouter.RouteUnsubscribe(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IDuplexCommunicationRouter.RegisterRequestHandler(Eze.Ims.Platform.Api.RequestServiceMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IDuplexCommunicationRouter.UnregisterRequestHandler(Eze.Ims.Platform.Api.RequestServiceMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IDuplexCommunicationRouter.RegisterPublisher(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IDuplexCommunicationRouter.UnregisterPublisher(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IDuplexCommunicationRouter.SendOutOfBandMessage(Eze.Ims.Platform.Api.PublicationMetadata,Eze.Ims.Platform.Communication.OutOfBandInformation,System.Boolean,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IDuplexCommunicationRouter.RouteCommunicationNodeState(Eze.Ims.Platform.Api.CommunicationNodeStateMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IDuplexCommunicationRouter.StartSRPAuthenticationRequest(Eze.Ims.Platform.Api.StartUserSRPTransactionRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IDuplexCommunicationRouter.AuthenticationRequest(Eze.Ims.Platform.Api.UserSessionRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IDuplexCommunicationRouter.DeauthenticationRequest(Eze.Ims.Platform.Api.LogoffRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IDuplexCommunicationRouter.ChangePassword(Eze.Ims.Platform.Api.PasswordRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IDuplexCommunicationRouter.PollForChanges(Eze.Ims.Platform.Communication.PollRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IEzeSerializer">
            <summary>
            Wrapper for multiple serialization providers
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IEzeSerializer.GetSerializationStyle(System.Type)">
            <summary>
            Returns the which serializer will be used to serialize the given type
            </summary>
            <param name="runtimeType">The type of object to be serialized</param>
            <returns>A value which uniquely identifies a serializer</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.OverflowException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IEzeSerializer.Serialize``1(``0)">
            <summary>
            Serialize the object graph into a byte array
            </summary>
            <param name="instance">The object to be serialized</param>
            <returns>A byte array representing the serialized object</returns>
            <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"/>
            <exception cref="T:System.Runtime.Serialization.SerializationException"/>
            <exception cref="T:System.ServiceModel.QuotaExceededException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IEzeSerializer.Serialize``1(``0,Eze.Ims.Platform.Api.SerializationStyle@)">
            <summary>
            Serialize the object graph into a byte array
            </summary>
            <param name="instance">The object to be serialized</param>
            <param name="serializationStyle">Returns serialization type used to serialize the object</param>
            <returns>A byte array representing the serialized object</returns>
            <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"/>
            <exception cref="T:System.Runtime.Serialization.SerializationException"/>
            <exception cref="T:System.ServiceModel.QuotaExceededException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IEzeSerializer.Deserialize(System.Type,System.Byte[])">
            <summary>
            Deserialize the byte array into an object
            </summary>
            <param name="outputType">The type that the byte array should be deserialzed into</param>
            <param name="b">A byte array representing a serialized object</param>
            <returns>An object of the given output type</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.OverflowException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IEzeSerializer.Deserialize(System.Type,System.Byte[],Eze.Ims.Platform.Api.SerializationStyle)">
            <summary>
            Deserialize the byte array into an object
            </summary>
            <param name="outputType">The type that the byte array should be deserialzed into</param>
            <param name="b">A byte array representing a serialized object</param>
            <param name="serializationStyle">Serialization style to use to deserialize the object</param>
            <returns>An object of the given output type</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.OverflowException"/>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IMessageEncryptionKeyProvider">
            <summary>
            IMessageEncryptionKeyProvider interface provides Data Encryption and Message Integrity key retrieval functionality
            Since it's being this interface is being imported by communication assemblies, whoever implements this interface 
            shouldn't import any classes which rely on communications or you will get circular MEF dependencies
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IMessageEncryptionKeyProvider.CacheAuthenticationInfo(Eze.Ims.Platform.Api.RouterAuthenticationInfo)">
            <summary>
            Caches message encryption keys derived from authentication information
            </summary>
            <param name="authInfo">Original authentication information to cache and derive keys from</param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IMessageEncryptionKeyProvider.GetDataEncryptionKey(Eze.Ims.Platform.Api.SessionIdentifier)">
            <summary>
            Provides data encryption key for a given session and protocol version
            </summary>
            <param name="sessionId">User session identifier</param>
            <returns>Set of data encryption keys</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IMessageEncryptionKeyProvider.GetMessageIntegrityKey(Eze.Ims.Platform.Api.SessionIdentifier)">
            <summary>
            Provides message integrity key for a given session and protocol version
            </summary>
            <param name="sessionId">User session identifier</param>
            <returns>Set of message integrity keys</returns>
        </member>
        <member name="T:Eze.Ims.Platform.Shared.Interface.IMessageRouterMetadata">
            <summary>
            Interface to represent router class metadata to be used in lazy MEF import
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Shared.Interface.IMessageRouterMetadata.MessageComponentTarget">
            <summary>
            Allows to define which component is the target for the message bus router decorated with this attribute
            </summary>
            <remarks>Existing components are: Client, Sentinel, SentinelSync, Service</remarks>
        </member>
        <member name="P:Eze.Ims.Platform.Shared.Interface.IMessageRouterMetadata.MessageBusName">
            <summary>
            The name of message to be imported
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IPublicationSettingsProvider">
            <summary>
            An interface to access global publication settings
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.IPublicationSettingsProvider.EncryptPublications">
            <summary>
            Determines whether or not all published messages will be encrypted
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.IPublicationSettingsProvider.LeaseExpirationPeriod">
            <summary>
            Define the maximum time a subscription remains active without calling RenewLease()
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Interface.IPublicationSettingsProvider.ServicesAdvertisementFrequency">
            <summary>
            determines the frequency for publishing "ServiceAdvertisementTopic
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IPublishSubscribeRouterInternal">
            <summary>
            Internal interface. Not for use outside of messaging layer implementation
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IPublishSubscribeRouterInternal.ResendServiceRegistrations(Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Resends service registations to other nodes
            </summary>
            <param name="origin">Originating router identifier</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IPublishSubscribeRouterInternal.RouteUnsubscribeInternal(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Routes 'unsubscribe' message and does additional cleanup
            </summary>
            <param name="topicDetails">Unsubscribe message metadata</param>
            <param name="origin">Originating router identifier</param>
            <returns>Completion task</returns>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IRequestResponseClientInternal">
            <summary>
            Internal interface. Not for use outside of messaging layer implementation
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseClientInternal.ExpirePendingRequests(System.Exception)">
            <summary>
            Expires pending requests when response is an exception
            </summary>
            <param name="exceptionResponse">Exception received as response</param>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Interface.IRequestResponseRouterInternal">
            <summary>
            Internal interface. Not for use outside of messaging layer implementation.
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRequestResponseRouterInternal.ResendServiceRegistrations(Eze.Ims.Platform.Api.NetworkIdentifier)">
            <summary>
            Resends service registations to other nodes
            </summary>
            <param name="origin">Originating router identifier</param>
            <returns>Completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.RouteRequest(Eze.Ims.Platform.Api.RequestMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.RouteResponse(Eze.Ims.Platform.Api.RequestMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.RoutePublish(Eze.Ims.Platform.Api.PublicationMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.RouteSubscribe(Eze.Ims.Platform.Api.SubscriptionMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.RouteUnsubscribe(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.RegisterPublisher(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.UnregisterPublisher(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.SendOutOfBandMessage(Eze.Ims.Platform.Api.PublicationMetadata,Eze.Ims.Platform.Communication.OutOfBandInformation,System.Boolean,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.RouteCommunicationNodeState(Eze.Ims.Platform.Api.CommunicationNodeStateMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.AuthenticationRequest(Eze.Ims.Platform.Api.UserSessionRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.StartSRPAuthenticationRequest(Eze.Ims.Platform.Api.StartUserSRPTransactionRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.CompleteSRPAuthenticationRequest(Eze.Ims.Platform.Api.UserSRPSessionRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.DeauthenticationRequest(Eze.Ims.Platform.Api.LogoffRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.ChangePassword(Eze.Ims.Platform.Api.PasswordRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.PollForAllChanges(Eze.Ims.Platform.Api.RequestMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.PollForChanges(Eze.Ims.Platform.Communication.PollRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.PostRequestSec(System.Byte[])">
            <inheritdocs/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Interface.IRestfulCommunicationRouter.PollForChangesSec(System.Byte[])">
            <inheritdocs/>
        </member>
        <member name="T:Eze.Ims.Platform.Shared.Interface.IMessageRouterProvider">
            <summary>
            Messaging interface used to get the list of message routers for a given application or service.  Does not need to be used by non-messaging libraries.
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.Interface.IMessageRouterProvider.GetRouterList">
            <summary>
            Return the list of message routers for the module
            </summary>
            <returns>The list of message routers for the module; an empty-list if no routers defined</returns>
        </member>
        <member name="T:Eze.Ims.Platform.Shared.ISchedulerResourceClientFactory">
            <summary>
            A factory for creating instances of <see cref="T:Eze.Ims.Platform.Api.ISchedulerResourceClient`2"/>
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.ISchedulerResourceClientFactory.Create``2">
            <summary>
            Creates an instance of <see cref="T:Eze.Ims.Platform.Api.ISchedulerResourceClient`2"/>
            </summary>
            <typeparam name="TResource">Resource</typeparam>
            <typeparam name="TSchedule">Schedule</typeparam>
            <returns>A scheduler resource client</returns>
        </member>
        <member name="T:Eze.Ims.Platform.Shared.LicenseKey">
            <summary>
            Converts License Key to FirmCode/GatewayUri and back
            </summary>
        </member>
        <member name="F:Eze.Ims.Platform.Shared.LicenseKey.Empty">
            <summary>
            Empty License Key
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.LicenseKey.op_Implicit(Eze.Ims.Platform.Shared.LicenseKey)~System.String">
            <summary>
            Implicit cast from license key to string
            </summary>
            <param name="licenseKey"></param>
            <returns></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.LicenseKey.ToString">
            <summary>
            Returns license key string for license key object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.LicenseKey.#ctor(System.String,System.String)">
            <summary>
            License Key
            </summary>
            <param name="firmCode"></param>
            <param name="gatewayUri"></param>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.LicenseKey.TryParse(System.String,Eze.Ims.Platform.Shared.LicenseKey@)">
            <summary>
            Parse license key string into an object.
            </summary>
            <param name="licenseKeyString"></param>
            <param name="licenseKey"></param>
            <returns></returns>
        </member>
        <member name="P:Eze.Ims.Platform.Shared.LicenseKey.FirmCode">
            <summary>
            Firm Authentication Code
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Shared.LicenseKey.GatewayUri">
            <summary>
            Firm Gateway Uri
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.BaseClientMessageEncryptionKeyProvider">
            <summary>
            Base class for client side encryption key management
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseClientMessageEncryptionKeyProvider.#ctor(Eze.NetEx.Logging.ILogger,Eze.Ims.Platform.Communication.Interface.IAEADProvider)">
            <summary>
            BaseClientMessageEncryptionKeyProvider constructor
            </summary>
            <param name="logger">Logger</param>
            <param name="encryptionProvider">Optional encryption provider</param>
            <exception cref="T:System.ArgumentNullException">Thrown if logger argument is null</exception>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseClientMessageEncryptionKeyProvider.GetDataEncryptionKey(Eze.Ims.Platform.Api.SessionIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseClientMessageEncryptionKeyProvider.GetMessageIntegrityKey(Eze.Ims.Platform.Api.SessionIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseClientMessageEncryptionKeyProvider.CacheAuthenticationInfo(Eze.Ims.Platform.Api.RouterAuthenticationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter">
            <summary>
            Abstract base class for buses to inherit from. Provides common implementation for some methods and properties
            </summary>
        </member>
        <member name="F:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.RouterAuthentication">
            <summary>
            Stores router authentication info
            </summary>
        </member>
        <member name="F:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.SecureMessageHelper">
            <summary>
            Stores a reference to secure message helper instance
            </summary>
        </member>
        <member name="F:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.OnMessagingError">
            <summary>
            An action to be called on messaging errors
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.RoutesOut``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.RouteRequest(Eze.Ims.Platform.Api.RequestMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.RouteResponse(Eze.Ims.Platform.Api.RequestMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.RegisterRequestHandler(Eze.Ims.Platform.Api.RequestServiceMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.UnregisterRequestHandler(Eze.Ims.Platform.Api.RequestServiceMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.RoutePublish(Eze.Ims.Platform.Api.PublicationMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.RouteSubscribe(Eze.Ims.Platform.Api.SubscriptionMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.RouteUnsubscribe(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.RegisterPublisher(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.UnregisterPublisher(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.SendOutOfBandMessage(Eze.Ims.Platform.Api.PublicationMetadata,Eze.Ims.Platform.Communication.OutOfBandInformation,System.Boolean,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.StartSRPAuthenticationRequest(Eze.Ims.Platform.Api.StartUserSRPTransactionRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.CompleteSRPAuthenticationRequest(Eze.Ims.Platform.Api.UserSRPSessionRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.AuthenticationRequest(Eze.Ims.Platform.Api.UserSessionRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.DeauthenticationRequest(Eze.Ims.Platform.Api.LogoffRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.ChangePassword(Eze.Ims.Platform.Api.PasswordRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.Start">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.Connect(Eze.Ims.Platform.Api.RouterAuthenticationInfo)">
            <summary>
            Base implementation of <see cref="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.Connect(Eze.Ims.Platform.Api.RouterAuthenticationInfo)"/>
            </summary>
            <param name="authInfo"><see cref="T:Eze.Ims.Platform.Api.RouterAuthenticationInfo"/> to set into the bus</param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.Disconnect">
            <summary>
            Base implementation of <see cref="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.Disconnect"/>
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.RouteCommunicationNodeState(Eze.Ims.Platform.Api.CommunicationNodeStateMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.PollForChanges(Eze.Ims.Platform.Communication.PollRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.SetCoreRouter(Eze.Ims.Platform.Communication.Interface.ICoreCommunicationRouter,System.Action{Eze.Ims.Platform.Communication.EzeMessagingErrorArgs})">
            <summary>
            Base implementation of <see cref="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.SetCoreRouter(Eze.Ims.Platform.Communication.Interface.ICoreCommunicationRouter,System.Action{Eze.Ims.Platform.Communication.EzeMessagingErrorArgs})"/>
            </summary>
            <param name="router">Core router to set into the bus</param>
            <param name="onErrorActon">An action to be called to notify of errors</param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.SetConfiguration(System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.LogTraffic">
            <summary>
            Gets a flag permitting bus to log traffic, potentially an expensive operation
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.Identifier">
            <summary>
            Implementation of Identifier property
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.MessageBusScope">
            <summary>
            Implementation of <see cref="P:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.MessageBusScope"/> property
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.SessionId">
            <summary>
            Implementation of readonly SessionId property
            </summary>
            <remarks>Default implementation returns <see cref="P:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.SessionId"/> field from <see cref="F:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.RouterAuthentication"/></remarks>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.IsConnected">
            <inheritdoc/>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.CoreRouter">
            <summary>
            Implementation of <see cref="P:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.CoreRouter"/> property
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.BaseBusCommunicationRouter.CanAuthenticate">
            <inheritdoc/>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.BusRoutingSwitchFactory">
            <summary>
            factory to create an instance of BusRoutingSwitch
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.IBusRoutingSwitchFactory">
            <summary>
            Factory for creation of IBusRoutingSwitch 
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.IBusRoutingSwitchFactory.Create(Eze.NetEx.Logging.ILogger)">
            <summary>
            returns an uninitialized instance of IBusRoutingSwitch
            </summary>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.IBusRoutingSwitchFactory.Create(Eze.NetEx.Logging.ILogger,Eze.Ims.Platform.Communication.IBusRoutingSettingsProvider,System.String)">
            <summary>
            Returns an initialized, ready-to-use IBusRoutingSwitch
            </summary>
            <param name="logger"></param>
            <param name="settingsProvider"></param>
            <param name="busName"></param>
            <returns></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BusRoutingSwitchFactory.Create(Eze.NetEx.Logging.ILogger)">
            <summary>
            returns a new, uninitialized BusRoutingSwitch. before using it, call Initialize()
            </summary>
            <param name="logger"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BusRoutingSwitchFactory.Create(Eze.NetEx.Logging.ILogger,Eze.Ims.Platform.Communication.IBusRoutingSettingsProvider,System.String)">
            <summary>
            returns an initialized, ready-to-use instance of busroutingswitch
            </summary>
            <param name="logger"></param>
            <param name="settingsProvider"></param>
            <param name="busName"></param>
            <returns>New instance of IBusRoutingSwitch</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.BusRoutingSwitch">
            <summary>
            implements IBusRoutingSwitch, and initializes it from 
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.IBusRoutingSwitch">
            <summary>
            helps to decide on which bus to route each message, based on action(pub/sub/request/reply/announce), topic name, available buses and configuration
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.IBusRoutingSwitch.Initialize(Eze.Ims.Platform.Communication.IBusRoutingSettingsProvider,System.String)">
            <summary>
            initializes the switch with a list of available buses.
            </summary>
            <param name="settingsProvider"></param>
            <param name="busName"></param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.IBusRoutingSwitch.ShouldRouteOnBus(Eze.Ims.Platform.Api.ICommonMetadata)">
            <summary>
            whether or not to route the message on a specific bus
            </summary>
            <param name="topic">ICommonMetadat with topic and action</param>
            <returns></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BusRoutingSwitch.Initialize(Eze.Ims.Platform.Communication.IBusRoutingSettingsProvider,System.String)">
            <summary>
            
            </summary>
            <param name="settingsProvider"></param>
            <param name="busName"></param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BusRoutingSwitch.ShouldRouteOnBus(Eze.Ims.Platform.Api.ICommonMetadata)">
            <summary>
            whether or not the message should be routed on the bus associated with this switch.
            </summary>
            <param name="topic"></param>
            <returns></returns>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.CommonMetadataContextManager">
            <summary>
            An implementation of ICommonMetadataContextManager wrapper around the CallContextPropertyManager to treat all of the CommonMetadata loggable properties as an atomic unit
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.CommonMetadataContextManager.#ctor(Eze.NetEx.ICallContextPropertyManager)">
            <summary>
            CommonMetadataContextManager constructor 
            </summary>
            <param name="callContextPropertyManager">ICallContextPropertyManager to use for storing/retrieving properties</param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.CommonMetadataContextManager.Set(Eze.Ims.Platform.Api.ICommonMetadata)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.CommonMetadataContextManager.Get">
            <inheritdoc/>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.IBusRoutingSettingsItem">
            <summary>
            represents one topic/topic pattern configuration section 
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.IBusRoutingSettingsItem.Action">
            <summary>
            which comm-action does this rule serve
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.IBusRoutingSettingsItem.TopicPattern">
            <summary>
            the topic for which this rule applies; uses Regex syntax for wildcarding
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.IBusRoutingSettingsItem.SessionClassMask">
            <summary>
            discriminate based of "sessionclass" (external vs. internal).
            use "None" to ignore session class while filtering.
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.IBusRoutingSettingsItem.Buses">
            <summary>
            list of buses configured for this topic. if RouteAll is false, this list is ordered by descending priority - the message will be sent
            on the first bus from this list which is available in current installation. if RouteAll is true, the order has no effect.
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.IBusRoutingSettingsProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.IBusRoutingSettingsProvider.GetConfiguration">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.IMessagingPerformanceCounters">
            <summary>
            Performance Counters for Messaging.
            Implemented by Platform.Cloud.Internal.
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.IMessagingPerformanceCounters.RequestAction(System.String,System.Func{System.Threading.Tasks.Task})">
            <summary></summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.IMessagingPerformanceCounters.RequestAction``1(System.String,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary></summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.IMessagingPerformanceCounters.HandlerAction(System.String,System.Func{System.Threading.Tasks.Task})">
            <summary></summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.IMessagingPerformanceCounters.HandlerAction``1(System.String,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary></summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.IMessagingPerformanceCounters.RouteRequest(System.String,System.Func{System.Threading.Tasks.Task})">
            <summary></summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.IMessagingPerformanceCounters.RouteResponse(System.String,System.Func{System.Threading.Tasks.Task})">
            <summary></summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.IMessagingPerformanceCounters.PublishPayload(System.String,System.Int32)">
            <summary></summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.ISecureMessageHelper">
            <summary>
            An inteface to provide encrypt/decrypt functionality for communication layer
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ISecureMessageHelper.NewKey">
            <summary>
            Creates a new random and secure encryption key
            </summary>
            <returns>Encryption key as byte array</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ISecureMessageHelper.EncryptMessageData(System.Byte[],Eze.Ims.Platform.Api.SessionIdentifier)">
            <summary>
            Encrypts binary message using session id to select encryption key and protocol
            </summary>
            <param name="message">Message to be encrypted</param>
            <param name="sessionId">Session id</param>
            <returns>Encrypted message</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ISecureMessageHelper.TryDecryptMessageData(System.Byte[],Eze.Ims.Platform.Api.SessionIdentifier,System.Byte[]@)">
            <summary>
            Decrypts message using session id to select decryption key and protocol
            </summary>
            <param name="message">Message to be decrypted</param>
            <param name="sessionId">Session id</param>
            <param name="decryptedMessage">Decrypted message, if successful</param>
            <returns>True on successful decryption, false otherwise</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ISecureMessageHelper.PrepareSecureRequest(Eze.Ims.Platform.Communication.WrappedMetadata,System.Byte[],Eze.Ims.Platform.Api.SessionIdentifier)">
            <summary>
            Prepares secure request from client to datacenter
            </summary>
            <param name="requestMetadata">Request metadata</param>
            <param name="payloadData">Request payload</param>
            <param name="sessionId">Session id</param>
            <returns>Encrypted request</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ISecureMessageHelper.TryDecryptRequestMessage(System.Byte[],Eze.Ims.Platform.Communication.WrappedMetadata@,System.Byte[]@,Eze.Ims.Platform.Api.SessionIdentifier@)">
            <summary>
            Verifies and decrypts request message
            </summary>
            <param name="outerMessageData">Encrypted request</param>
            <param name="metadata">Decrypted request metadata</param>
            <param name="messageData">Decrypted request payload</param>
            <param name="sessionId">Session id</param>
            <returns>True on successful decryption, false otherwise</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ISecureMessageHelper.PreparePollResponse(Eze.Ims.Platform.Api.SessionIdentifier,Eze.Ims.Platform.Communication.WrappedMetadata,Eze.Ims.Platform.Communication.PolledResponseData)">
            <summary>
            Prepares secure poll response from datacenter to client
            </summary>
            <param name="sessionId">Session id</param>
            <param name="wrappedMetadata">Response metadata</param>
            <param name="polledResponseData">Response payload</param>
            <returns>Encrypted response</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ISecureMessageHelper.ProcessSecurePollResponse(System.Byte[],System.Int64)">
            <summary>
            Verifies and decrypts poll response
            </summary>
            <param name="secureResponseData">Encrypted response</param>
            <param name="messageCounter">Original poll request message counter</param>
            <returns>Decrypted poll response</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ISecureMessageHelper.EncryptPublicationMessageData(System.Byte[],System.Byte[],System.Collections.Generic.IEnumerable{Eze.Ims.Platform.Api.SessionIdentifier})">
            <summary>
            Encrypts publication message
            </summary>
            <param name="body">Publication message payload</param>
            <param name="dataEncryptionKey">Encryption key</param>
            <param name="sessionIds">Collection of targeted session ids</param>
            <returns>Encrypted publication message</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ISecureMessageHelper.FilterPublicationMessageData(System.Byte[],Eze.Ims.Platform.Api.SessionIdentifier)">
            <summary>
            Sanitizes encrypted publication to include only the key for given session id
            </summary>
            <param name="message">Encrypted publication</param>
            <param name="sessionIdentifier">Target session id</param>
            <returns>Sanitized encrypted publication</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ISecureMessageHelper.TryDecryptPublicationMessageData(System.Byte[],System.Collections.Generic.IEnumerable{Eze.Ims.Platform.Api.SessionIdentifier},System.Byte[]@)">
            <summary>
            Verifies and decrypts publication message
            </summary>
            <param name="message">Encrypted publicatio message</param>
            <param name="sessionIds">Session id to use for decryption</param>
            <param name="decryptedMessage">Decrypted pulication</param>
            <returns>True on successful decryption, false otherwise</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ISecureMessageHelper.ValidateOuterHmac(System.Byte[])">
            <summary>
            Validates message using message's HMAC
            </summary>
            <param name="outerMessage">Message with HMAC to be validated</param>
            <returns>True on successful validation</returns>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.ISecureMessageHelper.CurrentKeyProvider">
            <summary>
            Gets current encryption key provider
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.ISecureMessageHelper.SupportedEncryptionProtocols">
            <summary>
            Gets a collection of supported encryption protocols
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Encryption.ProviderId">
            <summary>
            Enumeration of supported encryption provider IDs
            </summary>
        </member>
        <member name="F:Eze.Ims.Platform.Communication.Encryption.ProviderId.AES256HMACSHA256">
            <summary>
            Provider, which uses AES256 encryption and HMACSHA256 for message authentication
            </summary>
        </member>
        <member name="F:Eze.Ims.Platform.Communication.Encryption.ProviderId.AESGCM256HMACSHA256">
            <summary>
            Provider, which uses AESGCM256 authenticated encryption and HMACSHA256 for message authentication
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Encryption.IEncryptionProviderFactory">
            <summary>
            Factory interface to get an instance of encryption provider
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Encryption.IEncryptionProviderFactory.GetProvider(Eze.Ims.Platform.Communication.Encryption.ProviderId)">
            <summary>
            Gets an instance of encryption provider given provider id
            </summary>
            <param name="id">Encryption provider id</param>
            <returns>An encryption provider instance</returns>
            <remarks>Returned instnace may be cached for subsequent calls to get an encryption provider</remarks>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Encryption.IEncryptionProviderFactory.DefaultProviderId">
            <summary>
            Returns default provider id
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Encryption.AEADProviderFactory">
            <summary>
            Implementation of <see cref="T:Eze.Ims.Platform.Communication.Encryption.IEncryptionProviderFactory"/>
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Encryption.AEADProviderFactory.GetProvider(Eze.Ims.Platform.Communication.Encryption.ProviderId)">
            <inheritdoc/>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Encryption.AEADProviderFactory.DefaultProviderId">
            <inheritdoc/>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.PollDataLimits">
            <summary>
            Container for various limits to impose on data returned from poll
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PollDataLimits.MaxPollResponsesSize">
            <summary>
            Maximum total size limit to use when selecting number of responses to be returned. (0 - means no size limit)
            </summary>
            <remarks>Can be exceeded by the size of last response. Size will be calculated based on Protobuf-serialized responses</remarks>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PollDataLimits.MaxPollPublicationsSize">
            <summary>
            Maximum total size limit to use when selecting publications to be returned. (0 - means no size limit)
            </summary>
            <remarks>Can be exceeded by the size of last publication. Size will be calculated based on Protobuf-serialized publications</remarks>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PollDataLimits.MaxPollResponseCount">
            <summary>
            Maximum number of responses to be returned in a poll (0 - means default, which is currently 100)
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PollDataLimits.MaxPollPublicationCount">
            <summary>
            Maximum number of publications to be returned in a poll (0 - means default, which is currently 100)
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PollRequest.PollTrackingSequenceNumber">
            <summary>
            used to track poll requests and responses: the request will contain the poll tracking# of last successful poll. the reply, if not empty, will have the next number.
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PollRequest.PollLimits">
            <summary>
            Optional property to define poll response's custom size limits
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublicationSettingsProvider.#ctor(System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            constructor
            </summary>
            <param name="encryptPublications"></param>
            <param name="leaseExpirationPeriod"></param>
            <param name="serviceAdvertisementFrequency"></param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.Subscribe``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.ISubscriptionHandler{``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.UpdateSubscription``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Api.SubscriptionIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.Unsubscribe``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Api.SubscriptionIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.RegisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.RegisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.IFilterPlugin{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.RegisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.Interface.SubscriptionChangeNotification{``0},Eze.Ims.Platform.Communication.Interface.SubscriptionChangeNotification{``0})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.RegisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.IFilterPlugin{``0,``1},Eze.Ims.Platform.Communication.Interface.SubscriptionChangeNotification{``0},Eze.Ims.Platform.Communication.Interface.SubscriptionChangeNotification{``0})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.UnregisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.UnregisterSubscriptionChangeNotification``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.Publish``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.Publish``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Collections.Generic.IEnumerable{Eze.Ims.Platform.Api.SessionIdentifier},System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.RoutePublish(Eze.Ims.Platform.Api.PublicationMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.RouteSubscribe(Eze.Ims.Platform.Api.SubscriptionMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.RouteUnsubscribe(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.RegisterPublisher(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.UnregisterPublisher(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.SendOutOfBandMessage(Eze.Ims.Platform.Api.PublicationMetadata,Eze.Ims.Platform.Communication.OutOfBandInformation,System.Boolean,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.ResendServiceRegistrations(Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PublishSubscribeCommunicationProvider.Identifier">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.RequestResponseCommunicationProvider.Request``1(Eze.Ims.Platform.Api.ITopic{``0})">
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.RequestResponseCommunicationProvider.Request``1(Eze.Ims.Platform.Api.ITopic{``0},System.Threading.CancellationToken)">
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.RequestResponseCommunicationProvider.Request``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.RequestResponseCommunicationProvider.Request``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Threading.CancellationToken)">
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.RequestResponseCommunicationProvider.OneWayRequestCore``1(Eze.Ims.Platform.Api.ITopic{``0},System.Threading.CancellationToken,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="TIn"></typeparam>
            <param name="topic"></param>
            <param name="cancellationToken"></param>
            <param name="targetFirmId"></param>
            <returns></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.RequestResponseCommunicationProvider.OneWayRequestCoreInternal``1(Eze.Ims.Platform.Api.ITopic{``0},System.Threading.CancellationToken,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="TIn"></typeparam>
            <param name="topic"></param>
            <param name="cancellationToken"></param>
            <param name="targetFirmId"></param>
            <returns></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.RequestResponseCommunicationProvider.TwoWayRequestCore``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Threading.CancellationToken,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="topic"></param>
            <param name="cancellationToken"></param>
            <param name="targetFirmId"></param>
            <returns></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.RequestResponseCommunicationProvider.TwoWayRequestCoreInternal``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Threading.CancellationToken,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="topic"></param>
            <param name="cancellationToken"></param>
            <param name="targetFirmId"></param>
            <returns></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.RequestResponseCommunicationProvider.DoRequestCore``2(Eze.Ims.Platform.Api.ITopic{``0},System.Boolean,System.Threading.CancellationToken,Eze.Ims.Platform.Api.ActivityIdentifier,System.Nullable{System.Int32})">
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.SchedulerResourceClient`2">
            <summary>
            Implementation of <see cref="T:Eze.Ims.Platform.Api.ISchedulerResourceClient`2"/> for interaction with Scheduler service
            </summary>
            <typeparam name="TResource">The resource for which the request is being scheduled</typeparam>
            <typeparam name="TSchedule">The schedule</typeparam>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SchedulerResourceClient`2.Create(Eze.Ims.Platform.Api.IResourceRequest{`0},Eze.Ims.Platform.Api.SchedulerJobKey,`1)">
            <summary>
            Creates a <see cref="T:Eze.Ims.Platform.Api.SchedulerJob"/>
            </summary>
            <param name="request">The request being scheduled</param>
            <param name="jobKey">The key of the job being scheduled</param>
            <param name="schedule">The schedule of the job</param>
            <returns>A task with a <see cref="T:Eze.Ims.Platform.Api.SchedulerJob"/></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SchedulerResourceClient`2.Update(Eze.Ims.Platform.Api.IResourceRequest{`0},Eze.Ims.Platform.Api.SchedulerJobKey,`1,System.Int32)">
            <summary>
            Update a <see cref="T:Eze.Ims.Platform.Api.SchedulerJob"/>
            </summary>
            <param name="request">The request being scheduled</param>
            <param name="jobKey">The key of the job being scheduled</param>
            <param name="schedule">The schedule of the job</param>
            <param name="targetFirmId">The target firm id</param>
            <returns>A task with a <see cref="T:Eze.Ims.Platform.Api.SchedulerJob"/></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SchedulerResourceClient`2.Update(Eze.Ims.Platform.Api.IResourceRequest{`0},Eze.Ims.Platform.Api.SchedulerJobKey,`1)">
            <summary>
            Update a <see cref="T:Eze.Ims.Platform.Api.SchedulerJob"/>
            </summary>
            <param name="request">The request being scheduled</param>
            <param name="jobKey">The key of the job being scheduled</param>
            <param name="schedule">The schedule of the job</param>
            <returns>A task with a <see cref="T:Eze.Ims.Platform.Api.SchedulerJob"/></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SchedulerResourceClient`2.Create(Eze.Ims.Platform.Api.IResourceRequest{`0},Eze.Ims.Platform.Api.SchedulerJobKey,`1,System.Int32)">
            <summary>
            Creates a <see cref="T:Eze.Ims.Platform.Api.SchedulerJob"/>
            </summary>
            <param name="request">The request being scheduled</param>
            <param name="jobKey">The key of the job being scheduled</param>
            <param name="schedule">The schedule of the job</param>
            <param name="targetFirmId">The target firm id</param>
            <returns>A task with a <see cref="T:Eze.Ims.Platform.Api.SchedulerJob"/></returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SchedulerResourceClient`2.Read(Eze.Ims.Platform.Api.SchedulerJobReadRequest)">
            <summary>
            Reads a <see cref="T:Eze.Ims.Platform.Api.SchedulerJob"/>
            </summary>
            <param name="request">Read request</param>
            <returns>Scheduler job result</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SchedulerResourceClient`2.Read(Eze.Ims.Platform.Api.SchedulerJobReadRequest,System.Int32)">
            <summary>
            Reads a <see cref="T:Eze.Ims.Platform.Api.SchedulerJob"/>
            </summary>
            <param name="request">Read request</param>
            <param name="targetFirmId">Target firm id</param>
            <returns>Scheduler job result</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SchedulerResourceClient`2.Delete(Eze.Ims.Platform.Api.SchedulerJobDeleteRequest)">
            <summary>
            Deletes a <see cref="T:Eze.Ims.Platform.Api.SchedulerJob"/>
            </summary>
            <param name="request">Delete request</param>
            <returns>A completion task</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SchedulerResourceClient`2.Delete(Eze.Ims.Platform.Api.SchedulerJobDeleteRequest,System.Int32)">
            <summary>
            Deletes a <see cref="T:Eze.Ims.Platform.Api.SchedulerJob"/>
            </summary>
            <param name="request">Delete request</param>
            <param name="targetFirmId">Target firm id</param>
            <returns>A completion task</returns>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.BasicEncryptionKeyProvider">
            <summary>
            An IMessageEncryptionKeyProvider implementation which derives encryption keys from a given session id
            </summary>
            <remarks>This should not be used in production once we have a better key provider implementation</remarks>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BasicEncryptionKeyProvider.#ctor(Eze.Ims.Platform.Communication.Interface.IAEADProvider,Eze.NetEx.Logging.ILogger)">
            <summary>
            Constructs BasicEncryptionKeyProvider
            </summary>
            <param name="encryptionProvider">An encryption provider used for key derivation</param>
            <param name="logger">An ILogger interface for logging</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters is null</exception>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BasicEncryptionKeyProvider.CacheAuthenticationInfo(Eze.Ims.Platform.Api.RouterAuthenticationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BasicEncryptionKeyProvider.GetDataEncryptionKey(Eze.Ims.Platform.Api.SessionIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.BasicEncryptionKeyProvider.GetMessageIntegrityKey(Eze.Ims.Platform.Api.SessionIdentifier)">
            <inheritdoc/>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.Encryption.AES256HMACSHA256">
            <summary>
            AES256HMACSHA256
            </summary>
            <remarks>Implements <see cref="T:Eze.Ims.Platform.Communication.Interface.IAEADProvider"/> Using AES256 for encryption and HMACSHA256 for authentication</remarks>
            <seealso cref="T:Eze.Ims.Platform.Communication.Interface.IAEADProvider"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Encryption.AES256HMACSHA256.AuthenticatedEncrypt(System.Byte[],System.Byte[],System.Byte[])">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Encryption.AES256HMACSHA256.TryAuthenticatedDecrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[]@)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Encryption.AES256HMACSHA256.TryAuthenticatedDecrypt(System.Byte[],System.Collections.Generic.IEnumerable{System.Byte[]},System.Byte[],System.Byte[]@)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Encryption.AES256HMACSHA256.NewKey">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Encryption.AES256HMACSHA256.GetKeyFromPassword(System.String,System.Byte[]@)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Encryption.AES256HMACSHA256.DeriveKey(System.Byte[],System.String,System.Byte[])">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Encryption.AES256HMACSHA256.ComputeMac(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.Encryption.AES256HMACSHA256.VerifyMac(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <inheritDoc/>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Encryption.AES256HMACSHA256.SaltByteSize">
            <inheritDoc/>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Encryption.AES256HMACSHA256.KeyByteSize">
            <inheritDoc/>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Encryption.AES256HMACSHA256.MacByteSize">
            <inheritDoc/>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.Encryption.AES256HMACSHA256.RecommendedMacKeyByteSize">
            <inheritDoc/>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.DefaultCommunicationProvider">
            <summary>
            Base class to aggregate or inherit from to create an instance of ICommunicationProvider
            </summary>	
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.#ctor(Eze.NetEx.Logging.ILogger,Eze.Ims.Platform.Communication.ISecureMessageHelper,Eze.Ims.Platform.Communication.Interface.IPublicationSettingsProvider,Eze.Ims.Platform.Communication.Interface.ISubscriptionSettingsProvider,Eze.Ims.Platform.Communication.Interface.IBusAuthenticationRouter,Eze.Ims.Platform.Communication.Interface.IBusCommunicationRouter[])">
            <summary>
            Constructor to create DefaultCommunicationProvider in unit tests
            </summary>
            <param name="logger"></param>
            <param name="secureMessageHelper"></param>
            <param name="publicationSettingsProvider"></param>
            <param name="subscriptionSettingsProvider"></param>
            <param name="authenticationRouter"></param>
            <param name="externalMessageBusList"></param>
            <remarks>Called by tests only (shared and cloud tests)</remarks>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.#ctor(Eze.NetEx.Logging.ILogger,Eze.Ims.Platform.Communication.ISecureMessageHelper,System.String,System.Collections.Generic.Dictionary{System.String,System.String},Eze.Ims.Platform.Communication.IMessagingPerformanceCounters)">
            <summary>
            Constructor to be used from the client-side, not services
            </summary>
            <param name="logger"></param>
            <param name="secureMessageHelper"></param>
            <param name="messagingConfigFileName"></param>
            <param name="defaultConfig"></param>
            <param name="messagingPerformanceCounters"></param>
            <remarks>Called by App, APITest, Scheduler</remarks>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.#ctor(Eze.NetEx.Logging.ILogger,Eze.Ims.Platform.Communication.ISecureMessageHelper,Eze.Ims.Platform.Communication.DesktopMessageRouterProvider,Eze.Ims.Platform.Communication.IMessagingPerformanceCounters)">
            <summary>
            A private constructor serving as a shim to pass IPublicationSettingsProvider. Also limits EncryptedSession setting to client side only
            </summary>
            <param name="logger"></param>
            <param name="secureMessageHelper"></param>
            <param name="desktopMessageRouterProvider"></param>
            <param name="messagingPerformanceCounters"></param>
            <remarks>Called only by the constructor above</remarks>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.#ctor(Eze.NetEx.Logging.ILogger,Eze.Ims.Platform.Communication.ISecureMessageHelper,Eze.Ims.Platform.Shared.Interface.IMessageRouterProvider,Eze.Ims.Platform.Communication.Interface.IPublicationSettingsProvider,Eze.Ims.Platform.Communication.Interface.ISubscriptionSettingsProvider,Eze.Ims.Platform.Communication.IMessagingPerformanceCounters)">
            <summary>
            Base constructor used by everything except tests
            </summary>
            <param name="logger"></param>
            <param name="secureMessageHelper"></param>
            <param name="messageRouterProvider"></param>
            <param name="publicationSettingsProvider"></param>
            <param name="subscriptionSettingsProvider"></param>
            <param name="messagingPerformanceCounters"></param>
            <remarks>Called by constructor above, and services</remarks>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.StartBuses">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.StartBusesAsync">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Request``1(Eze.Ims.Platform.Api.ITopic{``0})">
            <inheritDoc/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Request``1(Eze.Ims.Platform.Api.ITopic{``0},System.Threading.CancellationToken)">
            <inheritDoc/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Request``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <inheritDoc/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Request``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Threading.CancellationToken)">
            <inheritDoc/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Request``1(Eze.Ims.Platform.Api.ITopic{``0},System.Int32)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Request``1(Eze.Ims.Platform.Api.ITopic{``0},System.Threading.CancellationToken,System.Int32)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Request``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Int32)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Request``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Threading.CancellationToken,System.Int32)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Request``2(Eze.Ims.Platform.Api.ITopic{``0,System.Collections.Generic.IEnumerable{``1}},System.Collections.Concurrent.IProducerConsumerCollection{``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Request``2(Eze.Ims.Platform.Api.ITopic{``0,System.Collections.Generic.IEnumerable{``1}},System.Collections.Concurrent.IProducerConsumerCollection{``1},System.Int32)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Subscribe``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.ISubscriptionHandler{``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.UpdateSubscription``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Api.SubscriptionIdentifier)">
            <inheritDoc/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Unsubscribe``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Api.SubscriptionIdentifier)">
            <inheritDoc/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RegisterRequestService``1(Eze.Ims.Platform.Api.ITopic{``0},Eze.Ims.Platform.Communication.IRequestHandler{``0})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RegisterRequestService``1(Eze.Ims.Platform.Api.ITopic{``0},Eze.Ims.Platform.Communication.IRequestHandler{``0},Eze.Ims.Platform.Api.RequestServiceSettings)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RegisterResourceService``1(Eze.Ims.Platform.Api.IResourceTopic{``0},Eze.Ims.Platform.Api.IResourceRequestHandler{``0})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RegisterResourceService``1(Eze.Ims.Platform.Api.IResourceTopic{``0},Eze.Ims.Platform.Api.IResourceRequestHandler{``0},Eze.Ims.Platform.Api.RequestServiceSettings)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.UnregisterResourceService``1(Eze.Ims.Platform.Api.IResourceTopic{``0})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RegisterRequestService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.IRequestHandler{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RegisterRequestService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.IRequestHandler{``0,``1},Eze.Ims.Platform.Api.RequestServiceSettings)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.UnregisterRequestService``1(Eze.Ims.Platform.Api.ITopic{``0})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.UnregisterRequestService``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RegisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RegisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.IFilterPlugin{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RegisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.Interface.SubscriptionChangeNotification{``0},Eze.Ims.Platform.Communication.Interface.SubscriptionChangeNotification{``0})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RegisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1},Eze.Ims.Platform.Communication.IFilterPlugin{``0,``1},Eze.Ims.Platform.Communication.Interface.SubscriptionChangeNotification{``0},Eze.Ims.Platform.Communication.Interface.SubscriptionChangeNotification{``0})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.UnregisterSubscriptionService``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Publish``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Publish``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Collections.Generic.IEnumerable{Eze.Ims.Platform.Api.SessionIdentifier},System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Publish``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Collections.Generic.IEnumerable{Eze.Ims.Platform.Api.SubscriptionIdentifier})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RegisterServiceAvailabilityMonitor``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Action{System.String,System.Boolean})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RegisterServiceAvailabilityMonitor``1(Eze.Ims.Platform.Api.ITopic{``0},System.Action{System.String,System.Boolean})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.UnregisterServiceAvailabilityMonitor``2(Eze.Ims.Platform.Api.ITopic{``0,``1},System.Action{System.String,System.Boolean})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.UnregisterServiceAvailabilityMonitor``1(Eze.Ims.Platform.Api.ITopic{``0},System.Action{System.String,System.Boolean})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.CheckServiceAvailability``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.CheckServiceAvailability``1(Eze.Ims.Platform.Api.ITopic{``0})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Authenticate(Eze.Ims.Platform.Api.UserSessionRequest)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.ChangePassword(Eze.Ims.Platform.Api.PasswordRequest)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Deauthenticate">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RouteRequest(Eze.Ims.Platform.Api.RequestMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RouteResponse(Eze.Ims.Platform.Api.RequestMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RoutePublish(Eze.Ims.Platform.Api.PublicationMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RegisterRequestHandler(Eze.Ims.Platform.Api.RequestServiceMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RouteSubscribe(Eze.Ims.Platform.Api.SubscriptionMetadata,System.Byte[],Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RouteUnsubscribe(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.UnregisterRequestHandler(Eze.Ims.Platform.Api.RequestServiceMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RegisterPublisher(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.UnregisterPublisher(Eze.Ims.Platform.Api.SubscriptionMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.SendOutOfBandMessage(Eze.Ims.Platform.Api.PublicationMetadata,Eze.Ims.Platform.Communication.OutOfBandInformation,System.Boolean,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.RouteCommunicationNodeState(Eze.Ims.Platform.Api.CommunicationNodeStateMetadata,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.AuthenticationRequest(Eze.Ims.Platform.Api.UserSessionRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.StartSRPAuthenticationRequest(Eze.Ims.Platform.Api.StartUserSRPTransactionRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.CompleteSRPAuthenticationRequest(Eze.Ims.Platform.Api.UserSRPSessionRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.DeauthenticationRequest(Eze.Ims.Platform.Api.LogoffRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.ChangePassword(Eze.Ims.Platform.Api.PasswordRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.PollForChanges(Eze.Ims.Platform.Communication.PollRequest,Eze.Ims.Platform.Api.NetworkIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Start">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Dispose">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Dispose(System.Boolean)">
            <summary>
            Deauthenticates and disposes loaded message buses
            </summary>
            <param name="disposing">True if called from <see cref="M:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Dispose"/></param>
        </member>
        <member name="E:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.SessionExpired">
            <summary>
            Called when communication provider detects session expiration
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.ConnectionState">
            <inheritDoc/>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.EncryptedSession">
            <inheritDoc/>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.Identifier">
            <inheritDoc/>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.HasAuthenticatedUserSession">
            <inheritDoc/>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.AuthenticationInfo">
            <inheritDoc/>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.SupportedEncryptionProtocols">
            <inheritDoc/>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.DefaultCommunicationProvider.GetSecureMessageHelper">
            <summary>
            Gets ISecureMessageHelper instance
            </summary>		
        </member>
        <member name="M:Eze.Ims.Platform.Communication.EzeSerializer.GetSerializationStyle(System.Type)">
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.OverflowException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.EzeSerializer.Serialize``1(``0)">
            <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"/>
            <exception cref="T:System.Runtime.Serialization.SerializationException"/>
            <exception cref="T:System.ServiceModel.QuotaExceededException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.EzeSerializer.Serialize``1(``0,Eze.Ims.Platform.Api.SerializationStyle@)">
            <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"/>
            <exception cref="T:System.Runtime.Serialization.SerializationException"/>
            <exception cref="T:System.ServiceModel.QuotaExceededException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.EzeSerializer.Deserialize(System.Type,System.Byte[])">
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.OverflowException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.EzeSerializer.Deserialize(System.Type,System.Byte[],Eze.Ims.Platform.Api.SerializationStyle)">
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.OverflowException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ISubscriptionHandler.OnOutOfBandData(Eze.Ims.Platform.Communication.OutOfBandInformation,Eze.Ims.Platform.Api.SubscriptionIdentifier)">
            <summary>
            A notification that new information (not data-related) about the topic associated with this subscription handler is available.
            </summary>
            <param name="info"></param>
            <param name="identifier"></param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ISubscriptionHandler`1.OnData(`0,Eze.Ims.Platform.Api.SubscriptionIdentifier)">
            <summary>
            A notification that new data of the given type is available.
            </summary>
            <param name="data"></param>
            <param name="identifier"></param>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.ActionSubscriptionHandler`1">
            <summary>
            Implementation of ISubscriptionHandler that calls onData when OnData is called and does nothing when OnOutOfBandData is called.
            Parameters onData and onOutOfBandData can be null meaning no action taken on those events.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ActionSubscriptionHandler`1.#ctor(System.Action{`0,Eze.Ims.Platform.Api.SubscriptionIdentifier},System.Action{Eze.Ims.Platform.Communication.OutOfBandInformation,Eze.Ims.Platform.Api.SubscriptionIdentifier})">
            <summary>
            Construct an instance that calls onData when OnData is called and does nothing when OnOutOfBandData is called.
            </summary>
            <param name="onData">Call this action (if not null) when OnData is called.</param>
            <param name="onOutOfBandData">Call this action (if not null) when OnOutOfBandData is called.</param>
        </member>
        <member name="T:MessagingConfiguration">
            <remarks/>
        </member>
        <member name="P:MessagingConfiguration.Common">
            <remarks/>
        </member>
        <member name="P:MessagingConfiguration.MessageBus">
            <remarks/>
        </member>
        <member name="T:MessagingConfigurationCommon">
            <remarks/>
        </member>
        <member name="P:MessagingConfigurationCommon.Configuration">
            <remarks/>
        </member>
        <member name="T:MessagingConfigurationCommonItem">
            <remarks/>
        </member>
        <member name="P:MessagingConfigurationCommonItem.Name">
            <remarks/>
        </member>
        <member name="P:MessagingConfigurationCommonItem.Value">
            <remarks/>
        </member>
        <member name="T:MessagingConfigurationMessageBus">
            <remarks/>
        </member>
        <member name="P:MessagingConfigurationMessageBus.Path">
            <remarks/>
        </member>
        <member name="P:MessagingConfigurationMessageBus.Dependencies">
            <remarks/>
        </member>
        <member name="P:MessagingConfigurationMessageBus.Configuration">
            <remarks/>
        </member>
        <member name="P:MessagingConfigurationMessageBus.Name">
            <remarks/>
        </member>
        <member name="P:MessagingConfigurationMessageBus.Enabled">
            <remarks/>
        </member>
        <member name="T:MessagingConfigurationMessageBusDependencies">
            <remarks/>
        </member>
        <member name="P:MessagingConfigurationMessageBusDependencies.Path">
            <remarks/>
        </member>
        <member name="P:MessagingConfigurationMessageBusDependencies.Assembly">
            <remarks/>
        </member>
        <member name="T:MessagingConfigurationMessageBusDependenciesPath">
            <remarks/>
        </member>
        <member name="P:MessagingConfigurationMessageBusDependenciesPath.Filter">
            <remarks/>
        </member>
        <member name="P:MessagingConfigurationMessageBusDependenciesPath.Value">
            <remarks/>
        </member>
        <member name="T:MessagingConfigurationMessageBusItem">
            <remarks/>
        </member>
        <member name="P:MessagingConfigurationMessageBusItem.Name">
            <remarks/>
        </member>
        <member name="P:MessagingConfigurationMessageBusItem.Value">
            <remarks/>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.PolledResponseData">
            <summary>
            A transport object for poll response. Internal to communication framework 
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.PolledResponseData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PolledResponseData.Requests">
            <summary>
            Array of request objects
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PolledResponseData.Responses">
            <summary>
            Array of response objects
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PolledResponseData.Publications">
            <summary>
            Array of publications
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PolledResponseData.Subscriptions">
            <summary>
            Array of subscribe requests
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PolledResponseData.Unsubscriptions">
            <summary>
            Array of un-subscribe requests
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PolledResponseData.ServiceRegistrations">
            <summary>
            Array of service registrations
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PolledResponseData.ServiceUnregistrations">
            <summary>
            Array of service un-registrations
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PolledResponseData.SubscriptionServiceRegistrations">
            <summary>
            Array of publication service registrations
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PolledResponseData.SubscriptionServiceUnregistrations">
            <summary>
            Array of publication service un-registrations
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PolledResponseData.OutOfBandPublications">
            <summary>
            Array of out-of-band publication data
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PolledResponseData.CommunicationNodeStateChanges">
            <summary>
            Array of <see cref="T:Eze.Ims.Platform.Communication.CommunicationNodeStateMetadataResponse"/> communication node state changes
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PolledResponseData.ActivityId">
            <summary>
            An activity id of original poll
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PolledResponseData.PollTrackingSequenceNumber">
            <summary>
            used to verify alignment between poll requests and responses
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PolledResponseData.RetryCount">
            <summary>
            if case of sequence mismatch, if retrycount is 1, we try to resend same message again. 
            if retry is more than 1 we assume poison content, so we remove publications, zap responses' body,
            and add error indication to responses.
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PolledResponseData.MoreDataAvailable">
            <summary>
            A flag to notify the poller that more data is immediately available
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.PolledResponseData.IsEmpty">
            <summary>
            Indicates whether PolledResponseData contains actual data
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.RequestData">
            <summary>
            A transport object internal to communication framework 
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.RequestData.TopicDetails">
            <summary>
            Metadata associated with this request or response
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.RequestData.TopicData">
            <summary>
            Serialized message data
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.RequestData.Origin">
            <summary>
            Originating network router
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.RequestData.ServiceMetadata">
            <summary>
            Metadata associated with request servce
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.ExtendRequestData">
            <summary>
            extension class that implements some behaviors
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ExtendRequestData.ConvertToError(Eze.Ims.Platform.Communication.RequestData,System.Exception,System.Boolean)">
            <summary>
            set the appropriate error fields on TopicDetails metadata, and optionally zap the data
            </summary>
            <param name="request"></param>
            <param name="e">An exception to set into request's metadata</param>
            <param name="zapData">whether or not to zap the data</param>
            <returns>this</returns>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.CommunicationNodeStateMetadataResponse">
            <summary>
            A transport object for Communication node state. Internal to communication framework 
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.CommunicationNodeStateMetadataResponse.StateDetails">
            <summary>
            New communication node state
            </summary>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.CommunicationNodeStateMetadataResponse.Origin">
            <summary>
            Originating network router
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.SecureMessageHelper">
            <summary>
            Implementation of ISecureMessageHelper
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SecureMessageHelper.SwapMacBytes(System.Byte[])">
            <summary>
            Swaps every other byte up to MAC size at the end of the message (where MAC is) with bytes preceding the MAC
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SecureMessageHelper.SerializeSecureMessage(Eze.Ims.Platform.Communication.SecureMessage,System.Int32)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SecureMessageHelper.DeserializeSecureMessage(System.Byte[])">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SecureMessageHelper.GetSessionIdFromSecureMessage(System.Byte[])">
            <summary>
            GetSessionIdFromSecureMessage is used in Unit tests only
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SecureMessageHelper.TryDecryptMessageData(System.Byte[],Eze.Ims.Platform.Api.SessionIdentifier,System.Byte[]@)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SecureMessageHelper.NewKey">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SecureMessageHelper.EncryptMessageData(System.Byte[],Eze.Ims.Platform.Api.SessionIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SecureMessageHelper.ValidateOuterHmac(System.Byte[])">
            <summary>
            Validates binary message using HMACSHA256
            </summary>
            <param name="outerMessage">Input message to be validated. Doesn't get modified</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SecureMessageHelper.PrepareSecureRequest(Eze.Ims.Platform.Communication.WrappedMetadata,System.Byte[],Eze.Ims.Platform.Api.SessionIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SecureMessageHelper.ProcessSecurePollResponse(System.Byte[],System.Int64)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SecureMessageHelper.PreparePollResponse(Eze.Ims.Platform.Api.SessionIdentifier,Eze.Ims.Platform.Communication.WrappedMetadata,Eze.Ims.Platform.Communication.PolledResponseData)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SecureMessageHelper.TryDecryptRequestMessage(System.Byte[],Eze.Ims.Platform.Communication.WrappedMetadata@,System.Byte[]@,Eze.Ims.Platform.Api.SessionIdentifier@)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SecureMessageHelper.EncryptPublicationMessageData(System.Byte[],System.Byte[],System.Collections.Generic.IEnumerable{Eze.Ims.Platform.Api.SessionIdentifier})">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SecureMessageHelper.FilterPublicationMessageData(System.Byte[],Eze.Ims.Platform.Api.SessionIdentifier)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SecureMessageHelper.TryDecryptPublicationMessageData(System.Byte[],System.Collections.Generic.IEnumerable{Eze.Ims.Platform.Api.SessionIdentifier},System.Byte[]@)">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SecureMessageHelper.EncryptString(System.String,System.String,System.Boolean)">
            <summary>
            Encrypts provided string
            </summary>
            <param name="plaintext">String to be encrypted</param>
            <param name="encryptionKey">Encryption key</param>
            <param name="userScope">Encryption scope (windows user/machine). If userScope is true then encrypted data can only be decrypted under same user account used when encrypting.</param>
            <returns>Encrypted string if succeeded. Null if failed to encrypt.</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.SecureMessageHelper.DecryptString(System.String,System.String,System.Boolean)">
            <summary>
            Decrypts provided string
            </summary>
            <param name="ciphertext">String to be decrypted</param>
            <param name="encryptionKey">Encryption key</param>
            <param name="userScope">Encryption scope (windows user/machine). If userScope is true then encrypted data can only be decrypted under same user account used when encrypting.</param>
            <returns>Decrypted string if succeeded, and null if failed to decrypt.</returns>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.SecureMessageHelper.CurrentKeyProvider">
            <inheritDoc/>
        </member>
        <member name="P:Eze.Ims.Platform.Communication.SecureMessageHelper.SupportedEncryptionProtocols">
            <inheritDoc/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.TopicDataProvider.StoreTypesForTwoWayTopic``2(Eze.Ims.Platform.Api.ITopic{``0,``1})">
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.OverflowException"/>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.TopicDataProvider.GetTypes(System.String)">
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:Eze.Ims.Platform.Communication.ResourceClient`1">
            <summary>
                Client for sending resource based requests
                <seealso cref="T:Eze.Ims.Platform.Api.IResourceClient`1"/>
            </summary>
            <typeparam name="TResource">Resource</typeparam>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.DeleteAsync(Eze.Ims.Platform.Api.IDeleteResourceRequest{`0},System.Int32)">
            <summary>
                Performs Delete operation on resource
            </summary>
            <param name="request">Delete request</param>
            <param name="targetFirmId">Target Firm Id</param>
            <returns>Task to monitor completion</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.DeleteAsync(Eze.Ims.Platform.Api.IDeleteResourceRequest{`0})">
            <summary>
                Performs Delete operation on resource
            </summary>
            <param name="request">Delete request</param>
            <returns>Task to monitor completion</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.CreateAsync(Eze.Ims.Platform.Api.ICreateResourceRequest{`0},System.Int32)">
            <summary>
                Performs Create operation on resource
            </summary>
            <param name="request">Create request</param>
            <param name="targetFirmId">Target Firm Id</param>
            <returns>Task to monitor completion</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.CreateAsync(Eze.Ims.Platform.Api.ICreateResourceRequest{`0})">
            <summary>
                Performs Create operation on resource
            </summary>
            <param name="request">Create request</param>
            <returns>Task to monitor completion</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.CreateAsync(Eze.Ims.Platform.Api.ICreateBatchResourceRequest{`0})">
            <summary>
                Performs a batch Create operation on resource
            </summary>
            <param name="request">Create request</param>
            <returns>Task to monitor completion</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.CreateAsync(Eze.Ims.Platform.Api.ICreateBatchResourceRequest{`0},System.Int32)">
            <summary>
                Performs a batch Create operation on resource
            </summary>
            <param name="request">Create request</param>
            <param name="targetFirmId">Target Firm Id</param>
            <returns>Task to monitor completion</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.UpdateAsync(Eze.Ims.Platform.Api.IUpdateResourceRequest{`0})">
            <summary>
                Performs Update operation on resource
            </summary>
            <param name="request">Update request</param>
            <returns>Task with created resource</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.UpdateAsync(Eze.Ims.Platform.Api.IUpdateResourceRequest{`0},System.Int32)">
            <summary>
                Performs Update operation on resource
            </summary>
            <param name="request">Update request</param>
            <param name="targetFirmId">Target Firm Id</param>
            <returns>Task with created resource</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.UpdateAsync(Eze.Ims.Platform.Api.IUpdateBatchResourceRequest{`0})">
            <summary>
                Performs a batch Update operation on resource
            </summary>
            <param name="request">Update request</param>
            <returns>Task with created resource</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.UpdateAsync(Eze.Ims.Platform.Api.IUpdateBatchResourceRequest{`0},System.Int32)">
            <summary>
                Performs a batch Update operation on resource
            </summary>
            <param name="request">Update request</param>
            <param name="targetFirmId">Target Firm Id</param>
            <returns>Task with created resource</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.ReadAsync(Eze.Ims.Platform.Api.IReadResourceRequest{`0})">
            <summary>
                Performs Read operation on resource
            </summary>
            <param name="request">Read request. Logical 'Or' operation on request properties is used for filtering</param>
            <returns>Task with read resource </returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.ReadAsync(Eze.Ims.Platform.Api.IReadResourceRequest{`0},System.Int32)">
            <summary>
                Performs Read operation on resource
            </summary>
            <param name="request">Read request. Logical 'Or' operation on request properties is used for filtering</param>
            <param name="targetFirmId">Target Firm Id</param>
            <returns>Task with read resource </returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.ReadAsync(Eze.Ims.Platform.Api.IFindResourceRequest{`0})">
            <summary>
                Performs Find operation on resource
            </summary>
            <param name="request">Find request. Logical 'And' operation on request properties is used for filtering</param>
            <returns>Task with found resources</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.ReadAsync(Eze.Ims.Platform.Api.IFindResourceRequest{`0},System.Int32)">
            <summary>
                Performs Find operation on resource
            </summary>
            <param name="request">Find request. Logical 'And' operation on request properties is used for filtering</param>
            <param name="targetFirmId">Target Firm Id</param>
            <returns>Task with found resources</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.CreateAsync(System.Collections.Generic.List{`0})">
            <summary>
            Creates resources
            </summary>
            <param name="resources">Resources to create</param>
            <returns>Created resources</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.ReadAsync(System.Collections.Generic.List{Eze.Ims.Platform.Api.ResourceIdentifier})">
            <summary>
            Performs a Read operation on resources
            </summary>
            <param name="keys">Resource keys.Logical 'Or' operation on request properties is used for filtering</param>
            <returns>Found resources</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.UpdateAsync(System.Collections.Generic.List{`0})">
            <summary>
                Performs Update operation on resource
            </summary>
            <param name="resources">Resources to update</param>
            <returns>Updated resources</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.DeleteAsync(System.Collections.Generic.List{Eze.Ims.Platform.Api.ResourceIdentifier})">
            <summary>
            Performs delete operation on resources
            </summary>
            <param name="keys">Keys of resources to delete</param>
            <returns>Result of deletion</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.DeleteAsync(System.Collections.Generic.List{Eze.Ims.Platform.Api.ResourceIdentifier},System.Int32)">
            <summary>
                Performs Delete operation on resource
            </summary>
            <param name="keys">Keys of resources to delete</param>
            <param name="targetFirmId">Target Firm Id</param>
            <returns>Task to monitor completion</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.CreateAsync(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            Creates resources
            </summary>
            <param name="resources">Resources to create</param>
            <param name="targetFirmId">The firm on which to perform the operation</param>
            <returns>Created resources</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.UpdateAsync(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
                Performs Update operation on resource
            </summary>
            <param name="resources">Resources to update</param>
            <param name="targetFirmId">The firm on which to perform the operation</param>
            <returns>Updated resources</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.ReadAsync(System.Collections.Generic.List{Eze.Ims.Platform.Api.ResourceIdentifier},System.Int32)">
            <summary>
            Performs a Read operation on resources
            </summary>
            <param name="keys">Resource keys.Logical 'Or' operation on request properties is used for filtering</param>
            <param name="targetFirmId">The firm on which to perform the operation</param>
            <returns>Found resources</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.Delete(Eze.Ims.Platform.Api.IDeleteResourceRequest{`0},System.Int32)">
            <summary>
            This method will be marked as Obsolete in the next version, use DeleteAsync instead
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.Delete(Eze.Ims.Platform.Api.IDeleteResourceRequest{`0})">
            <summary>
            This method will be marked as Obsolete in the next version, use DeleteAsync instead
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.Create(Eze.Ims.Platform.Api.ICreateResourceRequest{`0},System.Int32)">
            <summary>
            This method will be marked as Obsolete in the next version, use CreateAsync instead
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.Create(Eze.Ims.Platform.Api.ICreateResourceRequest{`0})">
            <summary>
            This method will be marked as Obsolete in the next version, use CreateAsync instead
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.Create(Eze.Ims.Platform.Api.ICreateBatchResourceRequest{`0})">
            <summary>
            This method will be marked as Obsolete in the next version, use CreateAsync instead
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.Create(Eze.Ims.Platform.Api.ICreateBatchResourceRequest{`0},System.Int32)">
            <summary>
            This method will be marked as Obsolete in the next version, use CreateAsync instead
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.Update(Eze.Ims.Platform.Api.IUpdateResourceRequest{`0})">
            <summary>
            This method will be marked as Obsolete in the next version, use UpdateAsync instead
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.Update(Eze.Ims.Platform.Api.IUpdateResourceRequest{`0},System.Int32)">
            <summary>
            This method will be marked as Obsolete in the next version, use UpdateAsync instead
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.Update(Eze.Ims.Platform.Api.IUpdateBatchResourceRequest{`0})">
            <summary>
            This method will be marked as Obsolete in the next version, use UpdateAsync instead
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.Update(Eze.Ims.Platform.Api.IUpdateBatchResourceRequest{`0},System.Int32)">
            <summary>
            This method will be marked as Obsolete in the next version, use UpdateAsync instead
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.Read(Eze.Ims.Platform.Api.IReadResourceRequest{`0})">
            <summary>
            This method will be marked as Obsolete in the next version, use ReadAsync instead
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.Read(Eze.Ims.Platform.Api.IReadResourceRequest{`0},System.Int32)">
            <summary>
            This method will be marked as Obsolete in the next version, use ReadAsync instead
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.Read(Eze.Ims.Platform.Api.IFindResourceRequest{`0})">
            <summary>
            This method will be marked as Obsolete in the next version, use ReadAsync instead
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Communication.ResourceClient`1.Read(Eze.Ims.Platform.Api.IFindResourceRequest{`0},System.Int32)">
            <summary>
            This method will be marked as Obsolete in the next version, use ReadAsync instead
            </summary>
        </member>
        <member name="T:Eze.Ims.Platform.Shared.SchedulerResourceClientFactory">
            <summary>
            A factory for creating <see cref="T:Eze.Ims.Platform.Api.ISchedulerResourceClient`2"/> instances
            </summary>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.SchedulerResourceClientFactory.#ctor(Eze.Ims.Platform.Communication.Interface.IEzeSerializer,Eze.Ims.Platform.Communication.Interface.ICommunicationProvider)">
            <summary>
            Initializes an instance of <see cref="T:Eze.Ims.Platform.Shared.SchedulerResourceClientFactory"/>
            </summary>
            <param name="serializer">Serializer</param>
            <param name="communicationProvider">Communication provider</param>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.SchedulerResourceClientFactory.Create``2">
            <summary>
            Creates an instance of <see cref="T:Eze.Ims.Platform.Api.ISchedulerResourceClient`2"/>
            </summary>
            <typeparam name="TResource">Resource</typeparam>
            <typeparam name="TSchedule">Schedule</typeparam>
            <returns>A scheduler resource client</returns>
        </member>
        <member name="T:Eze.Ims.Platform.Shared.StringEncryptionHelper">
            <summary>
            StringEncryptionHelper
            </summary>
            <remarks>
            Provides encrypt/decrypt <see cref="T:System.String"/> extension methods
            Operations can be done in user or machine scope. If user scope is used, only same user can decrypt the string, and if machine scope is used then any user on this machine can decrypt
            </remarks>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.StringEncryptionHelper.EzeEncrypt(System.String,System.String,System.Boolean)">
            <summary>
            Encrypts a string using given key
            </summary>
            <param name="plaintext">String to be encrypted</param>
            <param name="encryptionKey">Encryption key string</param>
            <param name="userScope">Defines whether to encrypt under current user scope or machine scope</param>
            <returns>Returns encrypted string or null if encryption failed</returns>
        </member>
        <member name="M:Eze.Ims.Platform.Shared.StringEncryptionHelper.EzeDecrypt(System.String,System.String,System.Boolean)">
            <summary>
            Decrypts a string using given key
            </summary>
            <param name="ciphertext">Encrypted string to be decrypted</param>
            <param name="encryptionKey">Encryption key string</param>
            <param name="userScope">Defines whether to decrypt under current user scope or machine scope</param>
            <returns>Returns decrypted string or null if decryption failed</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Eze.Ims.Platform.Shared.StringEncryptionHelper.CryptoToolkitEncrypt(System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Eze.Ims.Platform.Shared.StringEncryptionHelper.CryptoToolkitEncrypt(System.Byte[],System.Byte[],System.Byte[])" -->
    </members>
</doc>
