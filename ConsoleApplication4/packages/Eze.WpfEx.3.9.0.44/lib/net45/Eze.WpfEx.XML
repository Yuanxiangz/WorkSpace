<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Eze.WpfEx</name>
    </assembly>
    <members>
        <member name="T:Eze.WpfEx.DelegateCommandEx">
            <summary>
            This command uses delegates for both its Execute and CanExecute implementations, and supports task async/await on the command.
            </summary>
            <remarks>
            Also known as a "Relay Command". It is a custom implementation that wraps execute into a Task for async/await.
            It is not dereived from Prism's DelegateCommand.
            </remarks>
            <example>This command can be used for a command exeuction that can be cancelled.</example>
        </member>
        <member name="M:Eze.WpfEx.DelegateCommandEx.CreateAwaitableCommand">
            <summary>
            Creates a simple delegated command with an ignored callback method that can be 
            awaited.
            </summary>
            <returns>A simple command with an ignored callback method.</returns>
        </member>
        <member name="M:Eze.WpfEx.DelegateCommandEx.WhenExecutedAsync">
            <summary>
            Returns a Task that completes when this command is executed.
            </summary>
        </member>
        <member name="M:Eze.WpfEx.DelegateCommandEx.#ctor(System.Action)">
            <summary>
            Creates a DelegateCommandEx using the specified exeuction delegate.  Since only an execution method is 
            provided, this delegate command will always return true for CanExecute.
            </summary>
            <param name="executeMethod"></param>
        </member>
        <member name="M:Eze.WpfEx.DelegateCommandEx.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Creates a DelegateCommandEx using the specified Execute and CanExecute delegates.  
            </summary>
            <param name="executeMethod">The action to perform when Execute is invoked.</param>
            <param name="canExecuteMethod">The predicate that determines if execution can occur.</param>
        </member>
        <member name="M:Eze.WpfEx.DelegateCommandEx.RaiseCanExecuteChanged">
            <summary>
            Raises CanExecuteChanged on the UI thread so every command invoker can requery to check if the command can execute.
            </summary>
            <remarks>Note that this will trigger the execution of CanExecute(T) once for each invoker.</remarks>
        </member>
        <member name="E:Eze.WpfEx.DelegateCommandEx.Executed">
            <summary>
            This event is raised when this command is executed.
            </summary>
        </member>
        <member name="T:Eze.WpfEx.DelegateCommandEx`1">
            <summary>
            Generic version of a command that uses delegates for both its Execute and CanExecute implementations, and supports task async/await on the command. 
            </summary>
            <remarks>
            Also known as a "Relay Command". It is a custom implementation that wraps execute into a Task for async/await.
            It is not dereived from Prism's DelegateCommand.
            </remarks>
            <example>This command can be used for a command exeuction that can be cancelled.</example>
        </member>
        <member name="M:Eze.WpfEx.DelegateCommandEx`1.CreateAwaitableCommand">
            <summary>
            Creates a simple delegated command with an ignored callback method that can be 
            awaited.
            </summary>
            <returns>A simple command with an ignored callback method.</returns>
        </member>
        <member name="M:Eze.WpfEx.DelegateCommandEx`1.WhenExecutedAsync">
            <summary>
            Returns a Task that completes when this command is executed.
            </summary>
        </member>
        <member name="M:Eze.WpfEx.DelegateCommandEx`1.#ctor(System.Action{`0})">
            <summary>
            Creates a DelegateCommandEx using the specified exeuction delegate.  Since only an execution method is 
            provided, this delegated command will always return true for CanExecute.
            </summary>
            <param name="executeMethod"></param>
        </member>
        <member name="M:Eze.WpfEx.DelegateCommandEx`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Creates a DelegateCommandEx using the specified Execute and CanExecute delegates.  
            </summary>
            <param name="executeMethod">The action to perform when Execute is invoked.</param>
            <param name="canExecuteMethod">The predicate that determines if execution can occur.</param>
        </member>
        <member name="M:Eze.WpfEx.DelegateCommandEx`1.Execute(`0)">
            <summary>
            Executes the command with the specified parameter.
            </summary>
            <param name="parameter">The parameter to use in execution.</param>
        </member>
        <member name="M:Eze.WpfEx.DelegateCommandEx`1.RaiseCanExecuteChanged">
            <summary>
            Raises CanExecuteChanged on the UI thread so every command invoker can requery to check if the command can execute.
            </summary>
            <remarks>Note that this will trigger the execution of CanExecute(T) once for each invoker.</remarks>
        </member>
        <member name="E:Eze.WpfEx.DelegateCommandEx`1.Executed">
            <summary>
            This event is raised when this command is executed.
            </summary>
        </member>
        <member name="T:Eze.WpfEx.Converters.EnumEqualityToVisibilityConverter">
            <summary>
            Given an enum and a corresponding string value (defined via parameter), this converter checks to see
            if the two values match and returns the visibility specified by ValueIfEqual or ValueIfNotEqual
            </summary>
        </member>
        <member name="M:Eze.WpfEx.Converters.EnumEqualityToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the equality of the value and parameter to a visibility.
            </summary>
            <param name="value">The enumeration value.</param>
            <param name="targetType">Only used by data binding</param>
            <param name="parameter">The string value to check.  For the two to be equal, thus must be the enum.ToString() value.</param>
            <param name="culture">The culture.</param>
            <returns>ValueIfEqual if value and parameter are the string/enum equivalents.  ValueIfNotEqual if they are different.  DependencyProperty.Unset if not applicable.</returns>
        </member>
        <member name="T:Eze.WpfEx.DelegatedCommand">
            <summary>
            This command uses delegates for both its Execute and CanExecute implementations.  
            Also known as a "Relay Command".
            </summary>
        </member>
        <member name="M:Eze.WpfEx.DelegatedCommand.CreateAwaitableCommand">
            <summary>
            Creates a simple delegated command with an ignored callback method that can be 
            awaited.
            </summary>
            <returns>A simple command with an ignored callback method.</returns>
        </member>
        <member name="M:Eze.WpfEx.DelegatedCommand.WhenExecutedAsync">
            <summary>
            Returns a Task that completes when this command is executed.
            </summary>
        </member>
        <member name="M:Eze.WpfEx.DelegatedCommand.#ctor(System.Action)">
            <summary>
            Creates a DelegatedCommand using the specified exeuction delegate.  Since only an execution method is 
            provided, this delegated command will always return true for CanExecute.
            </summary>
            <param name="executeMethod"></param>
        </member>
        <member name="M:Eze.WpfEx.DelegatedCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Creates a DelegatedCommand using the specified Execute and CanExecute delegates.  
            </summary>
            <param name="executeMethod">The action to perform when Execute is invoked.</param>
            <param name="canExecuteMethod">The predicate that determines if execution can occur.</param>
        </member>
        <member name="E:Eze.WpfEx.DelegatedCommand.Executed">
            <summary>
            This event is raised when this command is executed.
            </summary>
        </member>
        <member name="T:Eze.WpfEx.DelegatedCommand`1">
            <summary>
            Generic version of a command that uses delegates for its Execute and CanExecute implementations.  
            Also known as a "Relay Command".
            </summary>
        </member>
        <member name="M:Eze.WpfEx.DelegatedCommand`1.CreateAwaitableCommand">
            <summary>
            Creates a simple delegated command with an ignored callback method that can be 
            awaited.
            </summary>
            <returns>A simple command with an ignored callback method.</returns>
        </member>
        <member name="M:Eze.WpfEx.DelegatedCommand`1.WhenExecutedAsync">
            <summary>
            Returns a Task that completes when this command is executed.
            </summary>
        </member>
        <member name="M:Eze.WpfEx.DelegatedCommand`1.#ctor(System.Action{`0})">
            <summary>
            Creates a DelegatedCommand using the specified exeuction delegate.  Since only an execution method is 
            provided, this delegated command will always return true for CanExecute.
            </summary>
            <param name="executeMethod"></param>
        </member>
        <member name="M:Eze.WpfEx.DelegatedCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Creates a DelegatedCommand using the specified Execute and CanExecute delegates.  
            </summary>
            <param name="executeMethod">The action to perform when Execute is invoked.</param>
            <param name="canExecuteMethod">The predicate that determines if execution can occur.</param>
        </member>
        <member name="M:Eze.WpfEx.DelegatedCommand`1.Execute(`0)">
            <summary>
            Executes the command with the specified parameter.
            </summary>
            <param name="parameter">The parameter to use in execution.</param>
        </member>
        <member name="E:Eze.WpfEx.DelegatedCommand`1.Executed">
            <summary>
            This event is raised when this command is executed.
            </summary>
        </member>
        <member name="T:Eze.WpfEx.Validation.IValidationElement">
            <summary>
            Interface for a logical element whose content can be either valid or invalid.
            </summary>
        </member>
        <member name="M:Eze.WpfEx.Validation.IValidationElement.IsContentValid">
            <summary>
            Checks to see if the content of this element is in a valid state.
            </summary>
            <returns>True if the content is valid.  False otherwise.</returns>
        </member>
        <member name="M:Eze.WpfEx.Utilities.BindingPropertyPathHelper.GetPropertyPathValue(System.Object,System.String)">
            <summary>
            Gets the value of the binding property path for a given object.
            </summary>
            <param name="obj">Source object.</param>
            <param name="propertyPath">Binding property path of the source value to retrieve.</param>
            <returns>The value of the property in the given binding path.</returns>
        </member>
    </members>
</doc>
