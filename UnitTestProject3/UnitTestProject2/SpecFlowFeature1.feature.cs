// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UnitTestProject2
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TradingWorkflowPermission22")]
    public partial class TradingWorkflowPermission22Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SpecFlowFeature1.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TradingWorkflowPermission22", "In order to make users perform Trading workflow\r\nAs a provisioning user\r\nI requir" +
                    "e the ability to turn on the trading workflow for a role", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Trading Workflow Permissions Exist in Role Template")]
        [NUnit.Framework.CategoryAttribute("Functional")]
        public virtual void TradingWorkflowPermissionsExistInRoleTemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Trading Workflow Permissions Exist in Role Template", new string[] {
                        "Functional"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("The Trading External Roles exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Workflow",
                        "Id"});
            table1.AddRow(new string[] {
                        "Blotter",
                        "59C0FE11-DECC-4A0A-90BF-3433B4DB0F62"});
            table1.AddRow(new string[] {
                        "Equity Order Entry",
                        "2C6D7D24-DAF8-4349-BCBD-5C5C28AE44DB"});
            table1.AddRow(new string[] {
                        "Equity Order Routing",
                        "91E2FC09-463F-48C5-910D-6D01E5ABAE8F"});
            table1.AddRow(new string[] {
                        "Equity Order Allocation",
                        "A6119EBC-3A7F-4157-A474-FD4486B12971"});
#line 9
    testRunner.Then("I should see the permissions", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
